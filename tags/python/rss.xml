<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on ABEE</title><link>https://abeelan.github.io/tags/python/</link><description>Recent content in Python on ABEE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 15 May 2023 11:24:32 +0000</lastBuildDate><atom:link href="https://abeelan.github.io/tags/python/rss.xml" rel="self" type="application/rss+xml"/><item><title>dotenv</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/dotenv/</link><pubDate>Mon, 15 May 2023 11:24:32 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/dotenv/</guid><description>Python-dotenv 是一个用于从.env文件中加载环境变量的 Python 库。.env文件通常用于保存敏感信息，如 API 密钥、密码、数据库连接字符串等，可以避免这些敏感信息被</description></item><item><title>navicat导出表结构并转为ORM类</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/navicat%E5%AF%BC%E5%87%BA%E8%A1%A8%E7%BB%93%E6%9E%84%E5%B9%B6%E8%BD%AC%E4%B8%BAorm%E7%B1%BB/</link><pubDate>Thu, 11 May 2023 16:46:58 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/navicat%E5%AF%BC%E5%87%BA%E8%A1%A8%E7%BB%93%E6%9E%84%E5%B9%B6%E8%BD%AC%E4%B8%BAorm%E7%B1%BB/</guid><description>在Navicat中，可以通过导出数据库表结构的方式来快速获取表结构，并转换成 SQLAlchemy ORM 框架中的 ORM 对象。 获取建表信息 打开 Navicat 并连接到相应的数据库，找到</description></item><item><title>fastapi学习笔记</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/fastapi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 10 May 2023 23:46:27 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/fastapi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>fastAPI 基于两个部分： pydantic starleete：python 异步 web 框架 ASGI 是后台服务与 python 框架之间的约定，不是可安装的包。 uvicorn 还得了解下 python 环境必须是 3.6+</description></item><item><title>frontmatter实现自动添加md文件前置元信息</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/frontmatter%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0md%E6%96%87%E4%BB%B6%E5%89%8D%E7%BD%AE%E5%85%83%E4%BF%A1%E6%81%AF/</link><pubDate>Mon, 08 May 2023 18:07:08 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/frontmatter%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0md%E6%96%87%E4%BB%B6%E5%89%8D%E7%BD%AE%E5%85%83%E4%BF%A1%E6%81%AF/</guid><description>使用 hugo 搭建个人博客，维护文件头部的 frontmatter 变更非常麻烦，这里通过自动化来统一添加。 环境配置 安装依赖库：frontmatter $ pip install python-frontmatter 代码 已更新到博</description></item><item><title>jwt实现token生成与校验</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/jwt%E5%AE%9E%E7%8E%B0token%E7%94%9F%E6%88%90%E4%B8%8E%E6%A0%A1%E9%AA%8C/</link><pubDate>Sat, 06 May 2023 16:55:52 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/jwt%E5%AE%9E%E7%8E%B0token%E7%94%9F%E6%88%90%E4%B8%8E%E6%A0%A1%E9%AA%8C/</guid><description>了解 PyJWT 是 Python 中处理 JSON Web Tokens（JWT）的库。 JWT 是一种用于安全地传输信息的开放式标准，可以将 JSON 格式的数据编码为安全的字符串，并使用密钥进行</description></item><item><title>sqlalchemy</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/sqlalchemy/</link><pubDate>Sat, 06 May 2023 16:07:24 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/sqlalchemy/</guid><description>Python SQLAlchemy 可以将 SQL 操作转化为 Python 对象，是对象关系映射（ORM，Object Relational Mapping）工具。 ORM 是一种将面向对象编程语言中的对象映射到关系型数据</description></item><item><title>命令行虚拟环境切换</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/</link><pubDate>Sat, 06 May 2023 14:26:12 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/</guid><description>打开终端并进入项目目录：打开终端应用程序，并使用 cd 命令进入包含 Python 项目的目录。 $ cd /path/to/project 激活虚拟环境：在项目目录下找到 venv 虚拟环境所在的文件夹，并执</description></item><item><title>websocket请求发送</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/websocket%E8%AF%B7%E6%B1%82%E5%8F%91%E9%80%81/</link><pubDate>Mon, 24 Oct 2022 09:28:10 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/websocket%E8%AF%B7%E6%B1%82%E5%8F%91%E9%80%81/</guid><description>websocket 测试 from websocket import create_connection # 测试地址：http://www.websocket-test.com/ def websocket_protocol(): # 发起连接 ws = create_connection(</description></item><item><title>requests请求鉴权</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/requests%E8%AF%B7%E6%B1%82%E9%89%B4%E6%9D%83/</link><pubDate>Sun, 23 Oct 2022 22:41:18 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/requests%E8%AF%B7%E6%B1%82%E9%89%B4%E6%9D%83/</guid><description>接口鉴权的通用解决方案： 认证信息的获取 认证信息的携带 auth 鉴权请求方法 import requests from requests.auth import HTTOBasicAuth proxy = { &amp;#34;http&amp;#34;: &amp;#34;http://127.0.0.1:8888&amp;#34;, &amp;#34;https&amp;#34;: &amp;#34;https://127.0.0.1:8888&amp;#34; } r = requests.get( url=&amp;#34;https://baidu.com&amp;#34;, proxies=proxy, verify=False, auth=HttpBasicAuth(&amp;#34;username&amp;#34;, &amp;#34;password&amp;#34;) )</description></item><item><title>requests-xmltodict将xml内容转为字典</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/requests-xmltodict%E5%B0%86xml%E5%86%85%E5%AE%B9%E8%BD%AC%E4%B8%BA%E5%AD%97%E5%85%B8/</link><pubDate>Sun, 23 Oct 2022 22:33:04 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/requests-xmltodict%E5%B0%86xml%E5%86%85%E5%AE%B9%E8%BD%AC%E4%B8%BA%E5%AD%97%E5%85%B8/</guid><description>xml 格式转换为 dict # 0.13 版本及以上 $ pip install xmltodict ![image-20221023223603798](/Users/lan/Library/Application Support/typora-user-images/image-20221023223603798.png) ![image-20221023224021093](/Users/lan/Library/Application Support/typora-user-images/image-20221023224021093.png)</description></item><item><title>requests-proxy为请求添加代理</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/requests-proxy%E4%B8%BA%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%90%86/</link><pubDate>Mon, 17 Oct 2022 19:00:58 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/requests-proxy%E4%B8%BA%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%90%86/</guid><description>通过 APP 发送一个请求，编写接口自动化测试脚本。 编写的过程中，如果脚本的请求跟实际不一致，通过代理的方式查看两次请求有什么不一致。 # 伪代码 proxies = {</description></item><item><title>requests-html解析网页</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/requests-html%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5/</link><pubDate>Thu, 13 Jan 2022 19:20:54 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/requests-html%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5/</guid><description>requests-html API 使用示例。 官方文档 Github 移动端混合应用，除 API 接口外，还包含大量的 web 页面需要校验，进行自动化测试。 在 GitHub 上找到一个解析 HTML 页面的库，与 requests 库是同作者</description></item><item><title>jmespath基本操作</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/jmespath%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 02 Dec 2021 10:46:42 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/jmespath%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid><description>JMESPath is a query language for JSON. JMESPath 是 JSON 查询语言，可以从 JSON 文档中提取和转换元素。在做接口自动化测试项目时，最基础的一步就是从响应中获取各种待验证字段值，掌握 jmespath 语</description></item><item><title>pycharm-plantuml插件</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/pycharm-plantuml%E6%8F%92%E4%BB%B6/</link><pubDate>Tue, 11 May 2021 11:03:40 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/pycharm-plantuml%E6%8F%92%E4%BB%B6/</guid><description>插件介绍 PlantUML 是画程序时序图的，Pycharm 有插件，可以创建 *.puml 文件，非常方便。 官方网站： http://plantuml.com/sequence-diagram 在线使用： https://plantuml.ceshiren.com/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000 插件下载 直接在 Pycharm 的 插件商店内没有搜索到，</description></item><item><title>else语法总结</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/else%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</link><pubDate>Thu, 21 Jan 2021 15:35:52 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/else%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</guid><description>记录一个小知识… 问题 阅读别人代码，有点疑惑，精简后如下： def code_example(arg=None): for i in range(5): if arg: break else: print(&amp;#39;else branch&amp;#39;) 循环语句后面直接跟了 else 语句，未报错，程序正常运行。一般 else 都是</description></item><item><title>递归学习与练习</title><link>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/%E9%80%92%E5%BD%92%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%BB%83%E4%B9%A0/</link><pubDate>Thu, 21 Jan 2021 15:30:12 +0000</pubDate><guid>https://abeelan.github.io/%E6%8A%80%E6%9C%AF%E6%A0%88/python/%E9%80%92%E5%BD%92%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%BB%83%E4%B9%A0/</guid><description>递归学习，通过汉诺塔游戏加强理解！ 递归 在一个函数内部调用自身本身，就是递归函数。 阶乘 5 的阶乘为：5*4*3*2*1 n 的阶乘为：1*2*3*…</description></item></channel></rss>