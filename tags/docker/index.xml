<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>docker on ABEE</title>
    <link>https://abeelan.github.io/tags/docker/</link>
    <description>Recent content in docker on ABEE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 27 Aug 2021 13:59:19 +0800</lastBuildDate><atom:link href="https://abeelan.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>K8s - 基础知识记录</title>
      <link>https://abeelan.github.io/posts/tech/docker/k8s-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 27 Aug 2021 13:59:19 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/k8s-%E5%9F%BA%E7%A1%80/</guid>
      <description>一切皆资源 pod service deployment &amp;hellip; 集群部署工具：kubeadm（官方） 参考链接：https://www.kubernetes.org.cn/7189.html kubectl -&amp;gt; 运行命令，操控集群 kubelet -&amp;gt; 与集群通信、鉴权、认证等等，一般在 kubeadm 内自动安装 kubeadm -&amp;gt; 部署工具 机器低于两核会直接报错，部署不起来。 kubectl $ kubectl 动作(get</description>
    </item>
    
    <item>
      <title>Docker - 搭建 selenium 分布式测试环境</title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-selenium/</link>
      <pubDate>Wed, 25 Aug 2021 11:08:05 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-selenium/</guid>
      <description>docker 实战演练，搭建测试平台。 搭建分布式 UI 自动化测试环境 自动化测试发展从刚开始的单机单线程到单机多线程再到多机分布式操作。 UI 自动化测试通过 Grid hub 分发用例到不同的节点，执行用例。 grid 负载均衡是通过查看不同节点启动的浏览器数量，如果数量多证明繁忙，会优先分发到浏览器数量少的node上 github 搜索 docker-</description>
    </item>
    
    <item>
      <title>Docker - 了解与基本使用</title>
      <link>https://abeelan.github.io/posts/tech/docker/docker/</link>
      <pubDate>Tue, 24 Aug 2021 14:26:21 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker/</guid>
      <description>Docker 是一个开源的应用容器引擎，基于 GO 语言开发，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的系统。 介绍 优点 快速交付应用。加快打包时间，加快测试，加快发布，缩短开发及运行代码之间的周期； 复杂环境管理，应用隔离。不同软件运行环境兼容依赖问题，开发</description>
    </item>
    
  </channel>
</rss>
