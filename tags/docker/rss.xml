<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on ABEE</title><link>https://abeelan.github.io/tags/docker/</link><description>Recent content in Docker on ABEE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 01 Jun 2023 15:59:44 +0000</lastBuildDate><atom:link href="https://abeelan.github.io/tags/docker/rss.xml" rel="self" type="application/rss+xml"/><item><title>Docker - 搭建Mysql服务</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAmysql%E6%9C%8D%E5%8A%A1/</link><pubDate>Thu, 01 Jun 2023 15:59:44 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAmysql%E6%9C%8D%E5%8A%A1/</guid><description># 设为 % 使得所有客户端均可连 $ docker run --name=mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_ROOT_HOST=% -d mysql $ docker exec -it mysql /bin/bash</description></item><item><title>Docker - 搭建Zentao禅道服务</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAzentao%E7%A6%85%E9%81%93%E6%9C%8D%E5%8A%A1/</link><pubDate>Thu, 01 Jun 2023 15:46:01 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAzentao%E7%A6%85%E9%81%93%E6%9C%8D%E5%8A%A1/</guid><description>$ docker run --name zentao -p 8081:80 \ -v /volume/zentao/zentaopms:/www/zentaopms \ -v /volume/zentao/mysqldata:/var/lib/mysql \ -e MYSQL_ROOT_PASSWORD=123456 \ -d \ easysoft/zentao:latest</description></item><item><title>Docker - 搭建Whistle在线抓包工具</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAwhistle%E5%9C%A8%E7%BA%BF%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/</link><pubDate>Thu, 01 Jun 2023 15:30:00 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAwhistle%E5%9C%A8%E7%BA%BF%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/</guid><description>打包镜像 FROMalpineEXPOSE8899RUN apk add --no-cache nodejs npm \ &amp;amp;&amp;amp; npm install whistle -g \ &amp;amp;&amp;amp; apk del npm \ &amp;amp;&amp;amp; mkdir /whistleENTRYPOINT [&amp;#34;w2&amp;#34;, &amp;#34;run&amp;#34;, &amp;#34;-M&amp;#34;,&amp;#34;prod&amp;#34;, &amp;#34;-D&amp;#34;,&amp;#34;/whistle&amp;#34;]启动服务 # docker-compose.yml version: &amp;#34;3&amp;#34; services: whistle:</description></item><item><title>Docker - 搭建Filebrowser文件管理服务</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAfilebrowser%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1/</link><pubDate>Thu, 01 Jun 2023 14:32:48 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAfilebrowser%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1/</guid><description>File Browser：一个具有漂亮界面的功能丰富的文件浏览器，支持预览、上传/下载文件、编辑文件等操作。 由于公司的文件管理工具为 SVN，每当有需</description></item><item><title>Docker - 搭建Chatgpt服务</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAchatgpt%E6%9C%8D%E5%8A%A1/</link><pubDate>Thu, 01 Jun 2023 11:48:50 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAchatgpt%E6%9C%8D%E5%8A%A1/</guid><description>项目地址： chatgpt-web ，通过 Docker 部署 chatGPT web 服务。 这个作为工具来用的话，真的是太香了，省去了很多搜索的时间。CV 工程师的福音，哈哈~~ 准备工作 一台安装了 docker 的</description></item><item><title>Docker - Docker Compose报错汇总</title><link>https://abeelan.github.io/tech/docker/docker-compose%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB/</link><pubDate>Wed, 23 Nov 2022 00:25:16 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/docker-compose%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB/</guid><description>汇总遇到的报错信息。 1. ParserError: while parsing a block mapping $ docker-compose down ERROR: yaml.parser.ParserError: while parsing a block mapping in &amp;#34;./compose.yml&amp;#34;, line 1, column 1 expected &amp;lt;block end&amp;gt;, but found &amp;#39;&amp;lt;block mapping start&amp;gt;&amp;#39; in &amp;#34;./compose.yml&amp;#34;, line 25, column 3 原因是空格导致未对齐，检查 25 行格式错误。</description></item><item><title>Docker - 搭建Sonic云真机平台记录</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAsonic%E4%BA%91%E7%9C%9F%E6%9C%BA%E5%B9%B3%E5%8F%B0%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 28 Feb 2022 16:50:34 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAsonic%E4%BA%91%E7%9C%9F%E6%9C%BA%E5%B9%B3%E5%8F%B0%E8%AE%B0%E5%BD%95/</guid><description>本文通过 docker 在服务器上搭建 sonic 真机平台 simple 版本。 部署文档：https://sonic-cloud.gitee.io/#/Deploy 搭建服务 该版本</description></item><item><title>Docker - 搭建Android打包环境</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAandroid%E6%89%93%E5%8C%85%E7%8E%AF%E5%A2%83/</link><pubDate>Wed, 12 Jan 2022 17:18:55 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAandroid%E6%89%93%E5%8C%85%E7%8E%AF%E5%A2%83/</guid><description>https://github.com/budtmo/docker-android 首先检查服务器是否支持虚拟化技术:https://linux.cn/article-9516-1.html $ egrep --color -i &amp;#34;svm|vmx&amp;#34; /proc/cpuinfo 如果出现红字就代表机</description></item><item><title>Docker - 搭建Sonarqube静态代码扫描</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAsonarqube%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F/</link><pubDate>Thu, 06 Jan 2022 16:49:53 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAsonarqube%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F/</guid><description>启动容器 $ docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9000:9000 sonarqube:latest</description></item><item><title>Docker - 构建镜像命令</title><link>https://abeelan.github.io/tech/docker/%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4/</link><pubDate>Wed, 05 Jan 2022 11:42:18 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4/</guid><description>容器启动参数解释 端口映射（-p） docker 会在虚拟的容器网络内启动容器，容器网络内的容器之间可以互相通信，外部无法与容器进行通信，我们希望将宿主机（</description></item><item><title>Docker - Dockerfile基础</title><link>https://abeelan.github.io/tech/docker/dockerfile%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 24 Dec 2021 14:33:09 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/dockerfile%E5%9F%BA%E7%A1%80/</guid><description>Dockerfile 是由一系列指令和参数构成的脚本，一个 Dockerfile 里面包含了构建整个镜像的完整命令。 工作中，由于业务水平与技术选型不同，在使用 Docker 起服务时，需要定制项目</description></item><item><title>Docker - 搭建私有镜像仓库</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</link><pubDate>Fri, 24 Dec 2021 14:32:22 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</guid><description>Docker registry 简介 Docker Registry 是存储 Dcoker Image 的仓库，运行 push、pull、search 时，是通过 Docker daemon 与 docker registry 通信。有时候使用 Docker Hub 这样的公共仓库可能不方便，我们可以</description></item><item><title>Docker - 搭建Testlink缺陷管理平台</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAtestlink%E7%BC%BA%E9%99%B7%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/</link><pubDate>Fri, 24 Dec 2021 14:31:22 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAtestlink%E7%BC%BA%E9%99%B7%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/</guid><description>搭建测试用例管理平台 Testlink Testlink 简介 Testlink 基于 WEB 的测试用例管理系统，主要功能是测试项目管理、产品需求管理、测试用例管理、测试计划管理、测试用例的创建、管</description></item><item><title>Docker - Docker Compose常用命令</title><link>https://abeelan.github.io/tech/docker/docker-compose%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Fri, 24 Dec 2021 10:51:49 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/docker-compose%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>Dcoekr-compose 简介 Docker-compose 是用于定义和运行多容器的 Docker 应用程序的工具。通过 compose，可以使用 yaml 文件来配置应用程序的服务。compose 的使用一般分为三步：</description></item><item><title>Docker - 搭建Jenkins</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAjenkins/</link><pubDate>Thu, 23 Dec 2021 19:41:02 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAjenkins/</guid><description>Docker 搭建 Jenkins 服务 从零搭建服务 历史服务迁移至 docker 一、从零搭建服务 拉取镜像 # lts: Long Term Support $ docker pull jenkins/jenkins:lts 注意注意注意！！！ 默认镜像 jenkins:latest 版本已经废弃，拉取时手动指定 lts</description></item><item><title>Docker - 搭建Nginx提供服务器目录对外访问</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAnginx%E6%8F%90%E4%BE%9B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%AE%E5%BD%95%E5%AF%B9%E5%A4%96%E8%AE%BF%E9%97%AE/</link><pubDate>Thu, 23 Dec 2021 17:33:44 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAnginx%E6%8F%90%E4%BE%9B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%AE%E5%BD%95%E5%AF%B9%E5%A4%96%E8%AE%BF%E9%97%AE/</guid><description>使用 Nginx 搭建 Web 服务 Nginx 简介 Nginx (engine x) 是一个高性能的 HTTP 和反向代理 WEB 服务器，通过简单的配置文件即可快速提供服务，性能稳定，系统资源占用少，并发能力强。 反</description></item><item><title>Docker - 搭建Gitlab</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAgitlab/</link><pubDate>Thu, 09 Sep 2021 13:10:49 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAgitlab/</guid><description>docker 部署 Gitlab 拉取镜像 $ docker pull gitlab/gitlab-ce:latest 启动容器 #!/bin/bash NAME=gitlab VOLUMES=/data1/docker/gitlab/volumes HOST=`ifconfig eth1 | grep &amp;#39;inet&amp;#39; | awk &amp;#39;{print $2}&amp;#39;` if [[ -n $(docker ps -a -q -f &amp;#34;name=^$NAME$&amp;#34;) ]]; then docker rm -f $NAME; fi docker run -d --name $NAME \ --hostname $HOST \ --publish 4433:443 \ --publish 8880:80 \ --publish 222:22 \ --restart always \ -v $VOLUMES/config:/etc/gitlab \ -v $VOLUMES/logs:/var/log/gitlab</description></item><item><title>Docker - K8S 基础</title><link>https://abeelan.github.io/tech/docker/k8s-%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 27 Aug 2021 13:59:19 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/k8s-%E5%9F%BA%E7%A1%80/</guid><description>一切皆资源 pod service deployment &amp;hellip; 集群部署工具：kubeadm（官方） 参考链接：https://www.kubernetes.org.cn/7189.htm</description></item><item><title>Docker - 搭建Yapi及使用记录</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAyapi%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link><pubDate>Thu, 26 Aug 2021 17:10:19 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAyapi%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid><description>YApi 是比较好用的接口管理平台，通过 docker-compose 搭建记录。 CentOS Linux release 7.9.2009 (Core) Docker 20.10.8 先编写 Dockerfile RUN yarn &amp;amp;&amp;amp; yarn buildWORKDIR/yapi/vendors# 拉取 YApi 源码RUN git clone \ --branch &amp;#34;v${YAPI_VERSION}&amp;#34; \ --single-branch \ --depth 1 \ https://github.com/YMFE/yapi.git .# 拷贝启动脚本RUN cp /yapi/scripts/start.js</description></item><item><title>Docker - 关于Docker的问题答疑</title><link>https://abeelan.github.io/tech/docker/%E5%85%B3%E4%BA%8Edocker%E7%9A%84%E9%97%AE%E9%A2%98%E7%AD%94%E7%96%91/</link><pubDate>Wed, 25 Aug 2021 17:01:33 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E5%85%B3%E4%BA%8Edocker%E7%9A%84%E9%97%AE%E9%A2%98%E7%AD%94%E7%96%91/</guid><description>关于 docker 的一些问题。 问题汇总 问题 1：在 selenium grid 中，多个 node 是在同一机器上，依然是在单机上执行自动化测试，如何将这些 node 分布到不同的机器上？ $ docker exec -it chrome bash</description></item><item><title>Docker - 搭建Selenium测试环境</title><link>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAselenium%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</link><pubDate>Wed, 25 Aug 2021 11:08:05 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/%E6%90%AD%E5%BB%BAselenium%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</guid><description>docker 实战演练，搭建测试平台。 搭建分布式 UI 自动化测试环境 自动化测试发展从刚开始的单机单线程到单机多线程再到多机分布式操作。 UI 自动化测试通过 Grid hub 分</description></item><item><title>Docker - Docker基础</title><link>https://abeelan.github.io/tech/docker/docker%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 24 Aug 2021 14:26:21 +0000</pubDate><guid>https://abeelan.github.io/tech/docker/docker%E5%9F%BA%E7%A1%80/</guid><description>Docker 是一个开源的应用容器引擎，基于 GO 语言开发，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的系统。 介绍</description></item></channel></rss>