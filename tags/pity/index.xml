<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>pity on ABEE</title>
    <link>https://abeelan.github.io/tags/pity/</link>
    <description>Recent content in pity on ABEE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 06 May 2023 14:59:09 +0800</lastBuildDate><atom:link href="https://abeelan.github.io/tags/pity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pity 项目分析</title>
      <link>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/pity-%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 06 May 2023 14:59:09 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/pity-%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/</guid>
      <description>pity(后端项目) config.py 项目配置类，通过 BaseSettings 来声明配置项及默认值，根据环境变量切换后端环境 app crud 该目录作为 dao 层，创建 dao 接口，然后会在配置文件中定义该接口的实现类，接着就可以在模块中调用 dao 接口进行数据业务员的处理。 主要是做数据持久层的工作，与数据库进行交互。 auth models 存放通过 sqlalchemy 创建表的类信息 表</description>
    </item>
    
    <item>
      <title>Pity 环境搭建</title>
      <link>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/pity-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 05 May 2023 18:31:48 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/pity-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>下载后端项目 下载代码 启动依赖服务 直接通过 docker-compose 实现会更加方便 注意： mysql 要选择 8.0 的，5.7 已知会报错，需要额外增加配置项 $ mkdir pity $ vim docker-compose.yml # docker-compose.yml version: &amp;#34;3&amp;#34; services: mysql: image: mysql:8.0 container_name: mysql_pity restart: always environment: MYSQL_ROOT_PASSWORD: root MYSQL_DATABASE: pity TZ: Asia/Shanghai volumes: - ./mysql/data:/var/lib/mysql ports: - &amp;#34;3306:3306&amp;#34; networks: - pity-net redis: image: redis container_name: redis_pity restart: always environment: REDIS_PASSWORD: root volumes: - ./redis/data:/data ports: - &amp;#34;6379:6379&amp;#34; networks: - pity-net networks: pity-net: driver: bridge # 启动容器服务 $ docker-compose up -d 启动服务 conf/dev.env 中修改对应的配置，执行</description>
    </item>
    
  </channel>
</rss>
