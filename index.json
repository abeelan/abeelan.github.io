[{"content":"目前正在阅读中\u0026hellip;\n","permalink":"https://abeelan.github.io/posts/read/python%E5%B7%A5%E5%8C%A0-%E6%9C%B1%E9%9B%B7/","summary":"目前正在阅读中\u0026hellip;","title":"《Python工匠》| 朱雷"},{"content":"Hi! I\u0026rsquo;m ABEE 😄.\nAs an automated testing engineer ✨ 😜 I have mastered the most essential skill of all: asking developers, \u0026ldquo;Which test cases will be affected by your changes?\u0026rdquo;\nMy hobbies include ✨ 💻 writing automated testing scripts\n🏀 playing basketball\n🍔 eating burgers\n📺 watching reality shows\n💤 sleeping \u0026ndash;\u0026gt; Of course, this is the most important 😂\nWell, I\u0026rsquo;ve managed to sneak through another year without getting caught! 😜 ✨ ","permalink":"https://abeelan.github.io/about/","summary":"Hi! I\u0026rsquo;m ABEE 😄. As an automated testing engineer ✨ 😜 I have mastered the most essential skill of all: asking developers, \u0026ldquo;Which test cases will be affected by your changes?\u0026rdquo; My hobbies include ✨ 💻 writing automated testing scripts 🏀 playing basketball 🍔 eating burgers 📺 watching reality shows 💤 sleeping \u0026ndash;\u0026gt; Of course, this is the most important 😂 Well, I\u0026rsquo;ve managed to sneak through another year without getting caught! 😜 ✨","title":"关于我 🙋🏻‍♂️"},{"content":"下文是我自己的搭建记录（MacOS, Hugo + GithubPage）\n搭建本地 Hugo 服务  Hugo 是使用 Go 语言编写的静态网站生成器，页面编译速度快，支持跨平台、皮肤自定义，方便部署。\n官方文档传送门\n 📢 📢 📢\n 以下是 hugo 通用的建站方式，适用于绝大多数主题。\n我本次使用的主题 sulv-hugo-papermod 作者已经把相关代码全部提交到仓库里面了，所以只需要拉取仓库代码，修改配置文件即可。详情查看仓库介绍文档。\n 安装 Hugo  方法一：在 Hugo 的官方网站 上下载并安装 Hugo 方法二：直接使用 Homebrew 安装  # 跳过 brew 检查更新（可以忽略） $ export HOMEBREW_NO_AUTO_UPDATE=true # 开始安装 $ brew install hugo ==\u0026gt; Summary 🍺 /usr/local/Cellar/hugo/0.111.3: 31 files, 40.6MB $ hugo version hugo v0.111.3+extended darwin/amd64 BuildDate=unknown 建站 进入自定义目录下，新建站点\n$ cd workspace $ hugo new site notebook Congratulations! 站点文件夹目录如下\n. ├── archetypes # 存放帖子的模板 md 文件 ├── assets # 存放被 Hugo Pipes 处理的文件 ├── config # 配置文件；支持 JSON、YAML、TOML 三种格式配置文件，加上不同后缀即可 ├── content # 存放博客 markdown 文件 ├── data # 存放 Hugo 处理的数据 ├── layouts # 存放布局文件 ├── static # 存放静态文件 图片 CSS JS 文件 └── themes # 存放主题 添加主题 可以访问 Hugo 主题库 挑选自己喜欢的主题，复制主题的 github 仓库下载链接。\n# 初始化当前目录为 git 仓库 $ cd notebook $ git init # 拉取主题 # 注意查看主题最低支持的 hugo 版本与当前版本是否匹配 $ git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/hugo-PaperMod # 后续主题有更新通过如下命令拉取 $ git submodule update --init 编辑配置文件blog_name/config.toml，一般在主题下会有对应的配置文件模板exampleSite/config.toml修改修改就行。\n访问 命令行启动\n$ hugo server -D 在浏览器中访问 localhost:1313 ，配置配置文件后会自动刷新预览。\n创建第一篇文章 # md 模板在 archetypes/default.md 设置 $ hugo new posts/tech/我的第一篇帖子.md 发布到 GitHubPages 博客静态页面搭建完成后，接下来就需要对外发布展示，这里使用免费的 GithubPages 来实现。\n实现原理为：\n 新建 md 文件 编辑完成后通过 hugo 命令生成 pulic 静态网页文件 将静态文件推送到远程仓库 通过域名访问  这样太麻烦了，每次还需要手动的去构建 md 为静态文件，且有点乱不方便维护，因此可以通过 Github Action 来提高效率。\n最终实现效果为：\n 新建 md 文件 推送 md 文件到远程仓库 Github Action 自动构建静态文件并推送到指定位置  这样就只需要关注写作就可以了。\n创建 GitPages 仓库 首先 注册 账号，登录github个人页面，新建仓库，仓库名格式必须为 \u0026lt;username\u0026gt;.github.io\n在该仓库 Settings - 左侧导航栏 Pages 页面，可查看访问域名。\n# 将该项目拉到本地 $ git clone https://github.com/abeelan/abeelan.github.io.git 创建存放博客源文件仓库 创建一个仓库用来存放博客的原始 md 文件，可以是私有仓库。\n# 可选 博客原始文件关联远程仓库 $ cd notebook $ git remote add orgin https://github.com/abeelan/notebook # 创建工作流文件,名字随便取 $ vim .github/workflows/hugo-deploy.yml # hugo-deploy.yml name: hugo-blog-deploy on: push: branches: - main jobs: hugo-blog-deploy: runs-on: ubuntu-latest  # 我 mac 也这么设置的，设置 macos 报错 steps: - name: Checkout source uses: actions/checkout@v2 with: submodules: recursive  # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup hugo uses: peaceiris/actions-hugo@v2 # hugo 官方 action，用于在任务环境中获取 hugo with: hugo-version: \u0026#34;0.81.0\u0026#34; # hugo version extended: true - name: Build run: hugo --minify  # 使用 hugo 构建静态网页 - name: Deploy uses: peaceiris/actions-gh-pages@v3 # 一个自动发布 github pages 的 action with: personal_token: ${{ secrets.PERSONAL_TOKEN }} # 无需修改，后面会为该变量设置 secret external_repository: abeelan/abeelan.github.io # 修改为你的 GitHub Pages 仓库 publish_dir: ./public publish_branch: main # 如果使用自定义域名，还需要添加下面一行配置 # cname:  配置 Github Token  点击头像 - Settings - Developer settings - Personal access tokens - Tokens(classic）- Generate new token(classic)   Note: GITHUB_ACTION_TOKEN 自定义有效期（过期了记得更新） Select scopes：workflow、admin:repo_hook 点击生成，保存好这串 token  返回博客项目，进入 Settings - Secrets and variables - Actions - New repo secret   Name：PERSONAL_TOKEN（跟上面配置文件保持一致，注意不能以 GITHUB_ 开头，否则会出错） secret：上一步创建的 token 值 Add secret  这一步设置的 Name：PERSONAL_TOKEN 需要与上面 yml 工作流中的变量名一致。\n结束 至此，配置完成。\n","permalink":"https://abeelan.github.io/posts/tech/%E5%85%B6%E4%BB%96/hugo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","summary":"下文是我自己的搭建记录（MacOS, Hugo + GithubPage） 搭建本地 Hugo 服务 Hugo 是使用 Go 语言编写的静态网站生成器，页面编译速度快，支持跨平台、皮肤自定义，方便部署。 官方文档传送门 📢 📢 📢 以下是 hugo 通用的建站方式，适用于绝大多数主题。 我本次使用的主题 sulv-hugo-papermod 作者已经把相关代码全部提交到仓库里面","title":"Hugo - 博客搭建记录"}]