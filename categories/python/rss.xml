<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on ABEE</title><link>https://abeelan.github.io/categories/python/</link><description>Recent content in Python on ABEE</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 14 Aug 2023 19:20:10 +0000</lastBuildDate><atom:link href="https://abeelan.github.io/categories/python/rss.xml" rel="self" type="application/rss+xml"/><item><title>Python - Pycharm Jetbrains全家桶无法打开</title><link>https://abeelan.github.io/tech/python/pycharm-jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/</link><pubDate>Mon, 14 Aug 2023 19:20:10 +0000</pubDate><guid>https://abeelan.github.io/tech/python/pycharm-jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/</guid><description>点击程序坞上面的应用程序，跳动两下就没有然后了，无法打开程序；附上解决办法。 前几天改了电脑的用户名称，导致一部分软件都没办法启动；原因是软件</description></item><item><title>Python - Python 运行报错记录</title><link>https://abeelan.github.io/tech/python/python-%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 14 Aug 2023 19:18:20 +0000</pubDate><guid>https://abeelan.github.io/tech/python/python-%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/</guid><description>遇到的问题 报错一 【Python】Library not loaded: /usr/local/opt/openssl/lib/libssl.1.0.0.dylib Mac Big Sur 11.5.1 运行 python 程序出现报错： import ssl File &amp;#34;/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py&amp;#34;, line 98, in &amp;lt;module&amp;gt; import _ssl # if we can&amp;#39;t import it, let the error propagate ImportError: dlopen(/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/_ssl.cpython-37m-darwin.so, 2): Library not loaded: /usr/local/opt/openssl/lib/libssl.1.0.0.dylib Referenced from: /usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/_ssl.cpython-37m-darwin.so</description></item><item><title>Python - Pytest Hook插件</title><link>https://abeelan.github.io/tech/python/pytest-hook%E6%8F%92%E4%BB%B6/</link><pubDate>Mon, 14 Aug 2023 19:13:50 +0000</pubDate><guid>https://abeelan.github.io/tech/python/pytest-hook%E6%8F%92%E4%BB%B6/</guid><description>插件分类 外部插件：pip install 安装的 本地插件：pytest 自动模块发现机制（ conftest.py 存放的） 内置插件：代码内部的 _pytest 目录加载的 常用外部插件 $ pip install pytest-ordering # 控制</description></item><item><title>Python - Pytest Ini配置文件</title><link>https://abeelan.github.io/tech/python/pytest-ini%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 14 Aug 2023 19:13:18 +0000</pubDate><guid>https://abeelan.github.io/tech/python/pytest-ini%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>pytest.ini 是 pytest 的默认配置文件，名称不可更改。 可以修改 pytest 的默认行为，不能使用任何中文符号，包括汉字、空格、引号、冒号等等 作用： 修改用例的命名规则 设置默</description></item><item><title>Python - Pytest 异常处理</title><link>https://abeelan.github.io/tech/python/pytest-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link><pubDate>Mon, 14 Aug 2023 19:10:26 +0000</pubDate><guid>https://abeelan.github.io/tech/python/pytest-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid><description>try&amp;hellip;except&amp;hellip; 同 python 用法 pytest.raises() def test_raise(): # 当捕获到预期的异常，且异常信息也匹配时，就忽略该异常，认为用例执行通过，match 可以不写 with pytest.raises(ZeroDivisionError, match=&amp;#34;除数不</description></item><item><title>Python - Pytest Mark作用</title><link>https://abeelan.github.io/tech/python/pytest-mark%E4%BD%9C%E7%94%A8/</link><pubDate>Mon, 14 Aug 2023 19:08:10 +0000</pubDate><guid>https://abeelan.github.io/tech/python/pytest-mark%E4%BD%9C%E7%94%A8/</guid><description>参数化用例 单参数 import pytest search_list = [&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;] @pytest.mark.parametrize(&amp;#34;name&amp;#34;, search_list) def test_search(name): assert name in search_list 多参数 @pytest.mark.parametrize( &amp;#34;input_num, expect&amp;#34;, [(&amp;#34;3+5&amp;#34;, 8), (&amp;#34;2+3&amp;#34;, 5), (&amp;#34;6+3&amp;#34;, 9)], # 多参数传递需要通过列表或元组嵌套的方式传递 ids=[&amp;#34;add1&amp;#34;, &amp;#34;add2&amp;#34;, &amp;#34;add3&amp;#34;] # 用例标识，个数与前面</description></item><item><title>Python - Mitmproxy</title><link>https://abeelan.github.io/tech/python/mitmproxy/</link><pubDate>Mon, 14 Aug 2023 19:06:52 +0000</pubDate><guid>https://abeelan.github.io/tech/python/mitmproxy/</guid><description>&amp;#34;&amp;#34;&amp;#34; @Time : 2021/6/28 6:44 下午 @Author : lan @Mail : lanzy.nice@gmail.com @Desc : HTTP-specific events. 针对http，常用的API http.HTTPFlow 实例 flow flow.request.headers #获取所有头信息，包含Host、User-Agent、Content-</description></item><item><title>Python - Requests 异常类</title><link>https://abeelan.github.io/tech/python/requests-%E5%BC%82%E5%B8%B8%E7%B1%BB/</link><pubDate>Mon, 14 Aug 2023 19:06:14 +0000</pubDate><guid>https://abeelan.github.io/tech/python/requests-%E5%BC%82%E5%B8%B8%E7%B1%BB/</guid><description>所有异常类型 requests. exceptions .HTTPError：HTTP错误 requests.exceptions.ConnectionError：连接错误 reque</description></item><item><title>Python - Threading 多线程处理</title><link>https://abeelan.github.io/tech/python/threading-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86/</link><pubDate>Mon, 14 Aug 2023 19:05:24 +0000</pubDate><guid>https://abeelan.github.io/tech/python/threading-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86/</guid><description>模拟马戏团小丑扔一个苹果。 def main(): print(&amp;#34;扔第一个苹果&amp;#34;) main() # 扔第一个苹果 模拟扔多个苹果。 import threading def task2(): print(&amp;#34;扔</description></item><item><title>Python - Mypy 静态类型检查</title><link>https://abeelan.github.io/tech/python/mypy-%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5/</link><pubDate>Mon, 14 Aug 2023 19:04:51 +0000</pubDate><guid>https://abeelan.github.io/tech/python/mypy-%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5/</guid><description>$ pip install mypy 文件类型符合预期 # demo.py from typing import List a: List[int] = [] a = [1, 2] $ mypy demo.py Success: no issues found in 1 source file 文件类型出现错误 # demo.py from typing import List a: List[int] = [] a = [1, 2, 3.4] # 增加了一个小数，不</description></item><item><title>Python - Prestool 随机数据、Mysql、加密等</title><link>https://abeelan.github.io/tech/python/prestool-%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%8D%AEmysql%E5%8A%A0%E5%AF%86%E7%AD%89/</link><pubDate>Mon, 14 Aug 2023 19:02:23 +0000</pubDate><guid>https://abeelan.github.io/tech/python/prestool-%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%8D%AEmysql%E5%8A%A0%E5%AF%86%E7%AD%89/</guid><description>prestool 封装了一些常用的工具，官网和 testerhome 的帖子里介绍的都很详细。 https://pypi.org/project/prestool/ https://testerhome.com/topics/32438 https://gitee.com/prestest/pres-pip-prestool</description></item><item><title>Python - Pipreqs 统计当前项目依赖库</title><link>https://abeelan.github.io/tech/python/pipreqs-%E7%BB%9F%E8%AE%A1%E5%BD%93%E5%89%8D%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E5%BA%93/</link><pubDate>Mon, 14 Aug 2023 19:01:34 +0000</pubDate><guid>https://abeelan.github.io/tech/python/pipreqs-%E7%BB%9F%E8%AE%A1%E5%BD%93%E5%89%8D%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E5%BA%93/</guid><description>$ pip install pipreqs # 生成 requirements.txt 文件 $ pipreqs ./ --encoding=utf-8 # 新项目安装所有依赖库 $ pip install -r .\requirements.txt</description></item><item><title>Python - Pycharm 基础使用</title><link>https://abeelan.github.io/tech/python/pycharm-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 14 Aug 2023 18:57:44 +0000</pubDate><guid>https://abeelan.github.io/tech/python/pycharm-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</guid><description>专业版激活 地址：https://www.bilibili.com/read/cv17139870 网盘地址(2022/8/8更新)： 链接：ht</description></item><item><title>Python - Typing 类型提示</title><link>https://abeelan.github.io/tech/python/typing-%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA/</link><pubDate>Mon, 14 Aug 2023 18:55:29 +0000</pubDate><guid>https://abeelan.github.io/tech/python/typing-%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA/</guid><description># 形参 food: str 代表 food 是字符串类型的 # -&amp;gt; str 代表函数的返回值类型 def eat(food: str) -&amp;gt; str: print(f&amp;#34;eat {food}&amp;#34;) return &amp;#34;Good&amp;#34; 类型提示的好处： 增强代码可读性 Pycharm 中代码提示 静态代码检查 类型别名 from typing</description></item><item><title>Python - 装饰器</title><link>https://abeelan.github.io/tech/python/%E8%A3%85%E9%A5%B0%E5%99%A8/</link><pubDate>Mon, 14 Aug 2023 18:55:05 +0000</pubDate><guid>https://abeelan.github.io/tech/python/%E8%A3%85%E9%A5%B0%E5%99%A8/</guid><description>内置装饰器 @classmethod 类方法 # 有如下格式化日期的类 接收 年月日 三个参数 class DateFmt: def __init__(self, year, month, day): self.year = year self.month = month self.day = day def output(self): print(f&amp;#34;{self.year}</description></item><item><title>Python - Pycharm Java_Error_In_Pycahrm.Hprof文件可放心删除</title><link>https://abeelan.github.io/tech/python/pycharm-java_error_in_pycahrm.hprof%E6%96%87%E4%BB%B6%E5%8F%AF%E6%94%BE%E5%BF%83%E5%88%A0%E9%99%A4/</link><pubDate>Mon, 14 Aug 2023 16:05:56 +0000</pubDate><guid>https://abeelan.github.io/tech/python/pycharm-java_error_in_pycahrm.hprof%E6%96%87%E4%BB%B6%E5%8F%AF%E6%94%BE%E5%BF%83%E5%88%A0%E9%99%A4/</guid><description>今天整理电脑大文件时，发现了这个名为 java_error_in_pycharm.hprof 的日志文件。 这是软件遇到性能问题时自动保存的日志信息，方便开发者定位问题，删除掉并不会有什么影响。 Hi all.</description></item><item><title>Python - Pytest Fixture</title><link>https://abeelan.github.io/tech/python/pytest-fixture/</link><pubDate>Mon, 14 Aug 2023 15:56:45 +0000</pubDate><guid>https://abeelan.github.io/tech/python/pytest-fixture/</guid><description>fixture 作用域 function 函数级，每个函数或方法都会调用 class 类级，每个测试类只运行一次 module 模块级 每个 .py 文件调用一次 package 包级 每个 python 包只调用一次 session 会话级 每次会话只需要</description></item><item><title>Python - Pytest 根据Mark标签控制Autouse Fixture</title><link>https://abeelan.github.io/tech/python/pytest-%E6%A0%B9%E6%8D%AEmark%E6%A0%87%E7%AD%BE%E6%8E%A7%E5%88%B6autouse-fixture/</link><pubDate>Mon, 14 Aug 2023 15:55:31 +0000</pubDate><guid>https://abeelan.github.io/tech/python/pytest-%E6%A0%B9%E6%8D%AEmark%E6%A0%87%E7%AD%BE%E6%8E%A7%E5%88%B6autouse-fixture/</guid><description>@pytest.fixture(autouse=True) def auto_restart(app, request): &amp;#34;&amp;#34;&amp;#34; 每条用例执行完成后自动重启应用，默认不清除应用数据 若需要清除数据，则在用例上添加装饰器 @pytest.mark.clear 即可 &amp;#34;&amp;#34;&amp;#34; if &amp;#39;clear&amp;#39; in request.keywords: app.restart(clear=True) else: app.restart() 定义好以上的 autouse fixture 后 @pytest.mark.clear def</description></item><item><title>Python - Requests 重定向</title><link>https://abeelan.github.io/tech/python/requests-%E9%87%8D%E5%AE%9A%E5%90%91/</link><pubDate>Mon, 14 Aug 2023 15:51:42 +0000</pubDate><guid>https://abeelan.github.io/tech/python/requests-%E9%87%8D%E5%AE%9A%E5%90%91/</guid><description>python requests &amp;ndash;&amp;gt; Redirection and History 默认情况下，请求将对除 HEAD 之外的所有动作执行位置重定向。使用 historyResponse 方法来跟踪重定向。 该 Response.history 列表包含 Response为完成请求而创建的对象</description></item><item><title>Python - Eval和Ast.Literal_Eval的区别</title><link>https://abeelan.github.io/tech/python/eval%E5%92%8Cast.literal_eval%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Mon, 14 Aug 2023 15:49:27 +0000</pubDate><guid>https://abeelan.github.io/tech/python/eval%E5%92%8Cast.literal_eval%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>eval 用来执行一个字符串表达式，并返回表达式的值。 input_ = eval(input(&amp;#39;Provide some data here: &amp;#39;)) # 如果输入下面的字符串且被执行，非常危险 __import__(&amp;#39;os&amp;#39;).system(&amp;#39;rm -rf /a-path-you-really-care-about&amp;#39;) ast.literal_eval 安全地评估表达式节点或包含 Python 文字</description></item><item><title>Python - Dynaconf 动态配置管理</title><link>https://abeelan.github.io/tech/python/dynaconf-%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/</link><pubDate>Fri, 02 Jun 2023 15:05:11 +0000</pubDate><guid>https://abeelan.github.io/tech/python/dynaconf-%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/</guid><description>Dynaconf 旨在成为在 Python 中管理配置的最佳选择。它可以从各种来源读取设置，包括环境变量、文件、服务器配置等，它适用于任何类型的 Python 程序。 安装 $ pip install dynaconf # 或者</description></item><item><title>Python - 虚拟环境 Venv</title><link>https://abeelan.github.io/tech/python/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83-venv/</link><pubDate>Thu, 01 Jun 2023 18:21:12 +0000</pubDate><guid>https://abeelan.github.io/tech/python/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83-venv/</guid><description>原文请访问 小菠萝测试笔记(已授权) ，本文在此基础上进行部分修改，用于个人知识整理。 什么是虚拟环境 Python 虚拟环境主要是为不同 Python 项目创建一个隔离的环</description></item><item><title>Python - 代码静态检查</title><link>https://abeelan.github.io/tech/python/%E4%BB%A3%E7%A0%81%E9%9D%99%E6%80%81%E6%A3%80%E6%9F%A5/</link><pubDate>Thu, 01 Jun 2023 17:50:58 +0000</pubDate><guid>https://abeelan.github.io/tech/python/%E4%BB%A3%E7%A0%81%E9%9D%99%E6%80%81%E6%A3%80%E6%9F%A5/</guid><description>isort 是一个自动格式化导入的工具。 安装依赖： $ poetry add -D isort 格式化代码： $ isort . 此时可以不用先急着提交，在后面对代码风格检测的时候可能还会再次格式化代码</description></item><item><title>Python - Pytest Mock</title><link>https://abeelan.github.io/tech/python/pytest-mock/</link><pubDate>Thu, 01 Jun 2023 17:43:31 +0000</pubDate><guid>https://abeelan.github.io/tech/python/pytest-mock/</guid><description>安装 $ pip install pytest $ pip install pytest pytest-mock 在测试模块中导入 mocker fixture import pytest def test_example(mocker): ... 示例 def test_run(cli, mocker): mock_run = mocker.patch.object(uvicorn, &amp;#39;run&amp;#39;) result = cli.invoke(cmdline.main, [&amp;#39;server&amp;#39;, &amp;#39;-h&amp;#39;, &amp;#39;127.0.0.1&amp;#39;, &amp;#39;-p&amp;#39;, &amp;#39;8080&amp;#39;]) assert result.exit_code == 0 mock_run.assert_called_once_with(app=mocker.ANY, host=&amp;#39;127.0.0.1&amp;#39;, port=8080) 这是一个 Python 单元测试的代码片段。它使用了 mocker</description></item><item><title>Python - Pip 包管理工具</title><link>https://abeelan.github.io/tech/python/pip-%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/</link><pubDate>Wed, 31 May 2023 18:16:19 +0000</pubDate><guid>https://abeelan.github.io/tech/python/pip-%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/</guid><description>遇到的问题 问题一 安装失败，报错日志说是未在清华源中找到某个版本~ 取消掉镜像配置，重新安装。 $ vim ~/.pip/pip.conf [install] #trusted-host = pypi.douban.com [global] #index-url = https://pypi.tuna.tsinghua.edu.cn/simple 问题二 pip 不可用：Attrib</description></item><item><title>Python - Alembic 数据库迁移工具</title><link>https://abeelan.github.io/tech/python/alembic-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB%E5%B7%A5%E5%85%B7/</link><pubDate>Wed, 31 May 2023 17:02:54 +0000</pubDate><guid>https://abeelan.github.io/tech/python/alembic-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB%E5%B7%A5%E5%85%B7/</guid><description>Alembic 是一个由 SQLAlchemy 开发的数据库迁移工具，可以再应用程序的开发周期中轻松地管理和升级数据库架构。 通过 Alembic，可以跟踪数据库架构变化，并在开发</description></item><item><title>Python - Poetry 环境管理</title><link>https://abeelan.github.io/tech/python/poetry-%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</link><pubDate>Tue, 30 May 2023 22:36:38 +0000</pubDate><guid>https://abeelan.github.io/tech/python/poetry-%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</guid><description>Poetry 是 Python 项目中创建虚拟环境、管理依赖包、打包发布的工具。 参考： 官方文档 Github Python 3.7+ 优势： 允许声明项目所依赖的库，并管理（安装/更新） 提供了一个锁文件</description></item><item><title>Python - Dotenv 加载环境变量</title><link>https://abeelan.github.io/tech/python/dotenv-%E5%8A%A0%E8%BD%BD%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 15 May 2023 11:24:32 +0000</pubDate><guid>https://abeelan.github.io/tech/python/dotenv-%E5%8A%A0%E8%BD%BD%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid><description>Python-dotenv 是一个用于从.env文件中加载环境变量的 Python 库。.env文件通常用于保存敏感信息，如 API 密钥、密码、数据库连接字符串等，可以避免这些敏感信息被</description></item><item><title>Python - Sqlalchemy Navicat导出表结构并转为Orm类</title><link>https://abeelan.github.io/tech/python/sqlalchemy-navicat%E5%AF%BC%E5%87%BA%E8%A1%A8%E7%BB%93%E6%9E%84%E5%B9%B6%E8%BD%AC%E4%B8%BAorm%E7%B1%BB/</link><pubDate>Thu, 11 May 2023 16:46:58 +0000</pubDate><guid>https://abeelan.github.io/tech/python/sqlalchemy-navicat%E5%AF%BC%E5%87%BA%E8%A1%A8%E7%BB%93%E6%9E%84%E5%B9%B6%E8%BD%AC%E4%B8%BAorm%E7%B1%BB/</guid><description>在Navicat中，可以通过导出数据库表结构的方式来快速获取表结构，并转换成 SQLAlchemy ORM 框架中的 ORM 对象。 获取建表信息 打开 Navicat 并连接到相应的数据库，找到</description></item><item><title>Python - Frontmatter实现自动添加Md文件前置元信息</title><link>https://abeelan.github.io/tech/python/frontmatter%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0md%E6%96%87%E4%BB%B6%E5%89%8D%E7%BD%AE%E5%85%83%E4%BF%A1%E6%81%AF/</link><pubDate>Mon, 08 May 2023 18:07:08 +0000</pubDate><guid>https://abeelan.github.io/tech/python/frontmatter%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0md%E6%96%87%E4%BB%B6%E5%89%8D%E7%BD%AE%E5%85%83%E4%BF%A1%E6%81%AF/</guid><description>使用 hugo 搭建个人博客，维护文件头部的 frontmatter 变更非常麻烦，这里通过自动化来统一添加。 环境配置 安装依赖库：frontmatter $ pip install python-frontmatter 代码 已更新到博</description></item><item><title>Python - Jwt实现Token生成与校验</title><link>https://abeelan.github.io/tech/python/jwt%E5%AE%9E%E7%8E%B0token%E7%94%9F%E6%88%90%E4%B8%8E%E6%A0%A1%E9%AA%8C/</link><pubDate>Sat, 06 May 2023 16:55:52 +0000</pubDate><guid>https://abeelan.github.io/tech/python/jwt%E5%AE%9E%E7%8E%B0token%E7%94%9F%E6%88%90%E4%B8%8E%E6%A0%A1%E9%AA%8C/</guid><description>了解 PyJWT 是 Python 中处理 JSON Web Tokens（JWT）的库。 JWT 是一种用于安全地传输信息的开放式标准，可以将 JSON 格式的数据编码为安全的字符串，并使用密钥进行</description></item><item><title>Python - Sqlalchemy 对象关系映射</title><link>https://abeelan.github.io/tech/python/sqlalchemy-%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/</link><pubDate>Sat, 06 May 2023 16:07:24 +0000</pubDate><guid>https://abeelan.github.io/tech/python/sqlalchemy-%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/</guid><description>Python SQLAlchemy 可以将 SQL 操作转化为 Python 对象，是对象关系映射（ORM，Object Relational Mapping）工具。 ORM 是一种将面向对象编程语言中的对象映射到关系型数据</description></item><item><title>Python - Sqlalchemy 建立连接报错Access Denied</title><link>https://abeelan.github.io/tech/python/sqlalchemy-%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99access-denied/</link><pubDate>Sat, 06 May 2023 16:07:24 +0000</pubDate><guid>https://abeelan.github.io/tech/python/sqlalchemy-%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99access-denied/</guid><description>engine: Engine = create_engine(url, echo=True) log.debug(&amp;#34;Connection established successfully.&amp;#34;) with engine.connect() as conn: conn.execute(text( f&amp;#34;CREATE DATABASE IF NOT EXISTS {url_obj.database}&amp;#34; f&amp;#34;default character set utf8mb4 collate utf8mb4_unicode_ci&amp;#34; )) log.debug(f&amp;#34;Database created successfully. DB_NAME: {url_obj.database}&amp;#34;) 执行上面代码时，出现报错： sqlalchemy.exc.ProgrammingError: (mysql.connector.errors.ProgrammingError) 1045 (28000): Access denied for user 'root'@'192.168.1.3' (using password: YES) ⚠️ 使用 URL 创建连接的正确方式</description></item><item><title>Python - Websocket请求发送</title><link>https://abeelan.github.io/tech/python/websocket%E8%AF%B7%E6%B1%82%E5%8F%91%E9%80%81/</link><pubDate>Mon, 24 Oct 2022 09:28:10 +0000</pubDate><guid>https://abeelan.github.io/tech/python/websocket%E8%AF%B7%E6%B1%82%E5%8F%91%E9%80%81/</guid><description>websocket 测试 from websocket import create_connection # 测试地址：http://www.websocket-test.com/ def websocket_protocol(): # 发起连接 ws = create_connection(</description></item><item><title>Python - Requests请求鉴权</title><link>https://abeelan.github.io/tech/python/requests-%E8%AF%B7%E6%B1%82%E9%89%B4%E6%9D%83/</link><pubDate>Sun, 23 Oct 2022 22:41:18 +0000</pubDate><guid>https://abeelan.github.io/tech/python/requests-%E8%AF%B7%E6%B1%82%E9%89%B4%E6%9D%83/</guid><description>接口鉴权的通用解决方案： 认证信息的获取 认证信息的携带 auth 鉴权请求方法 import requests from requests.auth import HTTOBasicAuth proxy = { &amp;#34;http&amp;#34;: &amp;#34;http://127.0.0.1:8888&amp;#34;, &amp;#34;https&amp;#34;: &amp;#34;https://127.0.0.1:8888&amp;#34; } r = requests.get( url=&amp;#34;https://baidu.com&amp;#34;, proxies=proxy, verify=False, auth=HttpBasicAuth(&amp;#34;username&amp;#34;, &amp;#34;password&amp;#34;) )</description></item><item><title>Python - Requests Xmltodict将Xml内容转为字典</title><link>https://abeelan.github.io/tech/python/requests-xmltodict%E5%B0%86xml%E5%86%85%E5%AE%B9%E8%BD%AC%E4%B8%BA%E5%AD%97%E5%85%B8/</link><pubDate>Sun, 23 Oct 2022 22:33:04 +0000</pubDate><guid>https://abeelan.github.io/tech/python/requests-xmltodict%E5%B0%86xml%E5%86%85%E5%AE%B9%E8%BD%AC%E4%B8%BA%E5%AD%97%E5%85%B8/</guid><description>xml 格式转换为 dict # 0.13 版本及以上 $ pip install xmltodict ![image-20221023223603798](/Users/lan/Library/Application Support/typora-user-images/image-20221023223603798.png) ![image-20221023224021093](/Users/lan/Library/Application Support/typora-user-images/image-20221023224021093.png)</description></item><item><title>Python - Requests Proxy为请求添加代理</title><link>https://abeelan.github.io/tech/python/requests-proxy%E4%B8%BA%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%90%86/</link><pubDate>Mon, 17 Oct 2022 19:00:58 +0000</pubDate><guid>https://abeelan.github.io/tech/python/requests-proxy%E4%B8%BA%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%90%86/</guid><description>通过 APP 发送一个请求，编写接口自动化测试脚本。 编写的过程中，如果脚本的请求跟实际不一致，通过代理的方式查看两次请求有什么不一致。 # 伪代码 proxies = {</description></item><item><title>Python - Requests Html解析网页</title><link>https://abeelan.github.io/tech/python/requests-html%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5/</link><pubDate>Thu, 13 Jan 2022 19:20:54 +0000</pubDate><guid>https://abeelan.github.io/tech/python/requests-html%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5/</guid><description>requests-html API 使用示例。 官方文档 Github 移动端混合应用，除 API 接口外，还包含大量的 web 页面需要校验，进行自动化测试。 在 GitHub 上找到一个解析 HTML 页面的库，与 requests 库是同作者</description></item><item><title>Python - Jmespath基本操作</title><link>https://abeelan.github.io/tech/python/jmespath%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 02 Dec 2021 10:46:42 +0000</pubDate><guid>https://abeelan.github.io/tech/python/jmespath%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid><description>JMESPath is a query language for JSON. JMESPath 是 JSON 查询语言，可以从 JSON 文档中提取和转换元素。在做接口自动化测试项目时，最基础的一步就是从响应中获取各种待验证字段值，掌握 jmespath 语</description></item><item><title>Python - Pycharm 插件汇总</title><link>https://abeelan.github.io/tech/python/pycharm-%E6%8F%92%E4%BB%B6%E6%B1%87%E6%80%BB/</link><pubDate>Tue, 11 May 2021 11:03:40 +0000</pubDate><guid>https://abeelan.github.io/tech/python/pycharm-%E6%8F%92%E4%BB%B6%E6%B1%87%E6%80%BB/</guid><description>插件汇总 Json Parser JSON Parser是一个用于验证和格式化JSON字符串的轻量级插件。 Tabnine（强烈推荐） 该插件主要在于可以帮助我们自动填充代码</description></item><item><title>Python - Else语法总结</title><link>https://abeelan.github.io/tech/python/else%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</link><pubDate>Thu, 21 Jan 2021 15:35:52 +0000</pubDate><guid>https://abeelan.github.io/tech/python/else%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</guid><description>记录一个小知识… 问题 阅读别人代码，有点疑惑，精简后如下： def code_example(arg=None): for i in range(5): if arg: break else: print(&amp;#39;else branch&amp;#39;) 循环语句后面直接跟了 else 语句，未报错，程序正常运行。一般 else 都是</description></item><item><title>Python - 递归学习与练习</title><link>https://abeelan.github.io/tech/python/%E9%80%92%E5%BD%92%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%BB%83%E4%B9%A0/</link><pubDate>Thu, 21 Jan 2021 15:30:12 +0000</pubDate><guid>https://abeelan.github.io/tech/python/%E9%80%92%E5%BD%92%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%BB%83%E4%B9%A0/</guid><description>递归学习，通过汉诺塔游戏加强理解！ 递归 在一个函数内部调用自身本身，就是递归函数。 阶乘 5 的阶乘为：5*4*3*2*1 n 的阶乘为：1*2*3*…</description></item></channel></rss>