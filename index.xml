<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ABEE</title>
    <link>https://abeelan.github.io/</link>
    <description>Recent content on ABEE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 06 May 2023 16:55:52 +0800</lastBuildDate><atom:link href="https://abeelan.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python - Jwt</title>
      <link>https://abeelan.github.io/posts/tech/python/python-jwttoken%E6%A0%A1%E9%AA%8C/</link>
      <pubDate>Sat, 06 May 2023 16:55:52 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/python/python-jwttoken%E6%A0%A1%E9%AA%8C/</guid>
      <description>web 项目 token 的生成与解析</description>
    </item>
    
    <item>
      <title>python - sqlalchemy</title>
      <link>https://abeelan.github.io/posts/tech/python/python-sqlalchemy/</link>
      <pubDate>Sat, 06 May 2023 16:07:12 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/python/python-sqlalchemy/</guid>
      <description>用 python 的方式操作数据库</description>
    </item>
    
    <item>
      <title>Pity 项目分析</title>
      <link>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/pity-%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 06 May 2023 14:59:09 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/pity-%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/</guid>
      <description>pity(后端项目) config.py 项目配置类，通过 BaseSettings 来声明配置项及默认值，根据环境变量切换后端环境 app crud 该目录作为 dao 层，创建 dao 接口，然后会在配置文件中定义该接口的实现类，接着就可以在模块中调用 dao 接口进行数据业务员的处理。 主要是做数据持久层的工作，与数据库进行交互。 auth models 存放通过 sqlalchemy 创建表的类信息 表</description>
    </item>
    
    <item>
      <title>git - 切换远程仓库</title>
      <link>https://abeelan.github.io/posts/tech/git/git-%E5%88%87%E6%8D%A2%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link>
      <pubDate>Sat, 06 May 2023 14:26:12 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/git/git-%E5%88%87%E6%8D%A2%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid>
      <description>切换</description>
    </item>
    
    <item>
      <title>命令行虚拟环境切换</title>
      <link>https://abeelan.github.io/posts/tech/python/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/</link>
      <pubDate>Sat, 06 May 2023 14:26:12 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/python/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/</guid>
      <description>在 Mac 上切换到 Python 项目中的虚拟环境</description>
    </item>
    
    <item>
      <title>命令行工具 - IStats</title>
      <link>https://abeelan.github.io/posts/tech/mac/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7-istats/</link>
      <pubDate>Sat, 06 May 2023 13:53:17 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/mac/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7-istats/</guid>
      <description>命令行工具，可以获取 Mac 上的 CPU 温度、风扇转速和电池信息。 安装 $ sudo gem install iStats # 输入电脑密码 $ brew install iStats 使用 $ istats --- CPU Stats --- CPU 温度 CPU temp: 67.69°C ▁▂▃▅▆▇ --- Fan Stats --- 风扇转速（圈/分钟） Total fans in system: 2 Fan 0 speed: 2018 RPM ▁▂▃▅▆▇ Fan 1 speed: 2178 RPM ▁▂▃▅▆▇ --- Battery Stats --- 电池健康情况 Battery health: unknown Cycle count: 134 ▁▂▃▅▆▇ 13.4% Max cycles: 1000 Current charge:</description>
    </item>
    
    <item>
      <title>Node - 简单了解</title>
      <link>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/node-%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3/</link>
      <pubDate>Sat, 06 May 2023 11:29:39 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/node-%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3/</guid>
      <description>Node.js、nvm、npm 和 cnpm 是四个不同的工具，它们之间存在一定的关系。 Node.js 是基于 Chrome V8 引擎的 JavaScript 运行环境，用于在服务器端执行 JavaScript 代码 node 命令则是通过 Node.js 在命令行中执行 JavaScript 代码的入口 nvm（Node Version Manager）是一个 Node.js 版本管理器，可以帮助您轻松地安装和切换不同版本的 Node.js npm（Node</description>
    </item>
    
    <item>
      <title>Pity 环境搭建</title>
      <link>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/pity-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 05 May 2023 18:31:48 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/pity-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>下载后端项目 下载代码 启动依赖服务 直接通过 docker-compose 实现会更加方便 注意： mysql 要选择 8.0 的，5.7 已知会报错，需要额外增加配置项 $ mkdir pity $ vim docker-compose.yml # docker-compose.yml version: &amp;#34;3&amp;#34; services: mysql: image: mysql:8.0 container_name: mysql_pity restart: always environment: MYSQL_ROOT_PASSWORD: root MYSQL_DATABASE: pity TZ: Asia/Shanghai volumes: - ./mysql/data:/var/lib/mysql ports: - &amp;#34;3306:3306&amp;#34; networks: - pity-net redis: image: redis container_name: redis_pity restart: always environment: REDIS_PASSWORD: root volumes: - ./redis/data:/data ports: - &amp;#34;6379:6379&amp;#34; networks: - pity-net networks: pity-net: driver: bridge # 启动容器服务 $ docker-compose up -d 启动服务 conf/dev.env 中修改对应的配置，执行</description>
    </item>
    
    <item>
      <title>Redis - 命令行工具 cli 安装及使用</title>
      <link>https://abeelan.github.io/posts/tech/%E6%95%B0%E6%8D%AE%E5%BA%93/redis-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7cli%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 05 May 2023 18:18:10 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E6%95%B0%E6%8D%AE%E5%BA%93/redis-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7cli%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>Mac 安装 redis-cli 命令行工具 安装 方式一 $ brew install redis 安装 redis 的同时会安装 redis-cli 工具，由于我已经通过 docker 启动 redis 服务了，所以不想再安装 redis 服务，使用方式二。 方式二：编译安装 # 打开终端，下载 Redis 的源码 $ curl -O http://download.redis.io/redis-stable.tar.gz # 解压缩源码包，并进入 src 目录 $ tar xzf redis-stable.tar.gz $ cd redis-stable/src # 编译并安装 redis-cli 工具。 $ make redis-cli $ sudo cp redis-cli /usr/local/bin/ # 检查 $ redis-cli --version redis-cli 7.0.11 命令 文档地址</description>
    </item>
    
    <item>
      <title>安全测试 - 记录验证码被暴力破解的案例</title>
      <link>https://abeelan.github.io/posts/tech/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95-%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E9%AA%8C%E8%AF%81%E7%A0%81%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E7%9A%84%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Thu, 27 Apr 2023 15:03:01 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95-%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E9%AA%8C%E8%AF%81%E7%A0%81%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E7%9A%84%E6%A1%88%E4%BE%8B/</guid>
      <description>记录一个验证码暴力破解的案例。 背景 某公司接到用户反馈，应用存在安全漏洞，通过技术手段可以在无手机情况下，获取验证码，直接修改密码成功。如果用户密码被他人修改成功，直接涉及到资产损失问题，无疑是一个非常严重的漏洞。 通过跟用户交流，他是通过暴力撞库的手段，去匹配正确验证码，由于后端服</description>
    </item>
    
    <item>
      <title>《Python工匠》| 朱雷</title>
      <link>https://abeelan.github.io/posts/read/python%E5%B7%A5%E5%8C%A0-%E6%9C%B1%E9%9B%B7/</link>
      <pubDate>Wed, 26 Apr 2023 15:03:01 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/read/python%E5%B7%A5%E5%8C%A0-%E6%9C%B1%E9%9B%B7/</guid>
      <description>目前正在阅读中&amp;hellip; 一级标题 二级标题 三级标题 print(&amp;#34;hello world&amp;#34;) hh ==lala==</description>
    </item>
    
    <item>
      <title>关于我 🙋🏻‍♂️</title>
      <link>https://abeelan.github.io/about/</link>
      <pubDate>Wed, 26 Apr 2023 15:03:01 +0800</pubDate>
      
      <guid>https://abeelan.github.io/about/</guid>
      <description>Hi! I&amp;rsquo;m ABEE 😄. As an automated testing engineer ✨ 😜 I have mastered the most essential skill of all: asking developers, &amp;ldquo;Which test cases will be affected by your changes?&amp;rdquo; My hobbies include ✨ 💻 writing automated testing scripts 🏀 playing basketball 🍔 eating burgers 📺 watching reality shows 💤 sleeping -&amp;gt; Of course, this is the most important 😂 Well, I&amp;rsquo;ve managed to sneak through another year without getting caught! 😜 ✨</description>
    </item>
    
    <item>
      <title>Android - 设备远程连接方式</title>
      <link>https://abeelan.github.io/posts/tech/andorid/android%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Tue, 25 Apr 2023 15:03:01 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/andorid/android%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</guid>
      <description>背景 在一些移动云测手机机房里 Android 设备是分批挂载在专门的宿主机集群上的，而执行自动化脚本的机器是在另外一个执行机集群中，因此就会产生这样的需求：执行机上的自动化脚本需要通过网络远程连接的方式来控制宿主机上的 Android 设备。 今天分享两个实现远程连接 Android 设备的方案。 实现 ADB Host 模式 手机连接电脑，执行如</description>
    </item>
    
    <item>
      <title>Hugo - 博客搭建记录（最新且完整）</title>
      <link>https://abeelan.github.io/posts/tech/%E5%85%B6%E4%BB%96/hugo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2v2/</link>
      <pubDate>Tue, 25 Apr 2023 15:03:01 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%85%B6%E4%BB%96/hugo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2v2/</guid>
      <description>搭建并部署本站的完整记录。</description>
    </item>
    
    <item>
      <title>《C&#43;&#43;程序设计》个人笔记</title>
      <link>https://abeelan.github.io/posts/read/c&#43;&#43;%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 08 Apr 2023 16:17:45 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/read/c&#43;&#43;%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</guid>
      <description>一、C++ 简介 程序设计语言分为： 低级语言（机器语言、汇编语言） 中级语言 高级语言（C、C++等） C++ 语言的主要特点： 兼容 C 语言 面向对象（继承和多态） 引进了类和对象的概念 C++ 的基本数据类型 bool：布尔值 char：字符型 int：整型 float：浮点型 double：双精度浮点型 注释的两种方</description>
    </item>
    
    <item>
      <title>《计算机网络原理》个人笔记</title>
      <link>https://abeelan.github.io/posts/read/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 08 Apr 2023 16:17:45 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/read/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</guid>
      <description>计算机网络概述 基本概念 起源：计算机网络是计算机技术与通信技术融合的产物。 定义：计算机网络是互连的、自治的计算机的集合。 ISP：因特网服务提供商（Internet Service Provider）。 协议 网络协议：网络通信实体之间在数据交换过程中需要遵循的规则或约定。 协议三要素： 语法：定义实体之间</description>
    </item>
    
    <item>
      <title>《计算机网络原理》计算题汇总</title>
      <link>https://abeelan.github.io/posts/read/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E8%AE%A1%E7%AE%97%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sat, 08 Apr 2023 16:17:45 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/read/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E8%AE%A1%E7%AE%97%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      <description>计算题汇总 计算机网络性能 题一 题二 题三 HTTP 连接 题一 页面：建立连接 + 请求页面 = 1 + 1 图片：建立连接 + 请求图片 = (1 + 1) x 8 答：共需要 18 RTTh ![image-20230308233241159](/Users/lan/Library/Application Support/typora-user-images/image-20230308233241159.png) 页面：建立连接 + 请求页面 = 1 + 1 图片：建立连接 + 请求图片 = （1 + 1） + （1 + 1），由于配置了并行连接，每次 5 个，需要两次 答：共需要 6 RTTh ![image-20230308233438567](/Users/lan/Library/Application Support/typora-user-images/image-20230308233438567.png) 非流水方式</description>
    </item>
    
    <item>
      <title>MySQL - 常用命令汇总</title>
      <link>https://abeelan.github.io/posts/tech/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sat, 08 Oct 2022 16:17:45 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</guid>
      <description>简介 **数据（Data）**是描述事物的符号记录，是指利用物理符号记录下来的、可以鉴别的信息。 **数据库（Database, DB）**是指长期储存在计算机中的有组织、可共享的数据集合。 **数据库管理系统（DBMS）**是专门用于建立和管理数据库的一套软件，介于应用程序和操作系统之</description>
    </item>
    
    <item>
      <title>ycwdaaaa 话题整理</title>
      <link>https://abeelan.github.io/posts/tech/%E5%85%B6%E4%BB%96/%E5%AD%99%E9%AB%98%E9%A3%9E%E8%AF%9D%E9%A2%98%E6%95%B4%E7%90%86/</link>
      <pubDate>Sat, 08 Oct 2022 16:17:45 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%85%B6%E4%BB%96/%E5%AD%99%E9%AB%98%E9%A3%9E%E8%AF%9D%E9%A2%98%E6%95%B4%E7%90%86/</guid>
      <description>ycwdaaaa (孙高飞) 在 TesterHome 的发帖整理。 更新日志： 【2022.01.12】create：创建该贴。 【2022.07.07】update：增加各模块发帖数量；新增最近 5 篇发帖；总贴数：141。 【2023.03.27】update：总贴数：145。 花两天时间终于认真看完一遍大佬的帖子，是看完不是</description>
    </item>
    
    <item>
      <title>《数据库系统原理》个人笔记</title>
      <link>https://abeelan.github.io/posts/read/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 08 Oct 2022 16:17:45 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/read/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</guid>
      <description>题型 单选题：15 * 2 = 30 填空题：10 * 1 = 10 文字题：5 * 6 = 30 综合题：2 * 15 =30 考试时间：150 分钟 设计题 - 关系代数、SQL 语句 综合题 - ER图、范式 一、数据库系统概述 1. 数据库基本概念 数据（Data） 是描述事物的符号记录，是指利用物理符号记录下来的、可以鉴别的信息。数据是信息存在的一</description>
    </item>
    
    <item>
      <title>《数据结构导论》排序</title>
      <link>https://abeelan.github.io/posts/read/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%BC%E8%AE%BA%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 08 Oct 2022 16:17:45 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/read/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%BC%E8%AE%BA%E6%8E%92%E5%BA%8F/</guid>
      <description>排序 概述 数据排序：将一个文件的记录按关键字不减（或不增）次序排列，使文件成为有序文件 稳定排序：排序后，相同关键字的记录保持它们原来的相对次序 不稳定排序：排序后，相同关键字的记录相对次序发生变更 排序类型 内部排序：全部数据存于内存 外部排序：需要对外存进行访问 比较算法的好坏，主要看空间</description>
    </item>
    
    <item>
      <title>《数据结构导论》查找表</title>
      <link>https://abeelan.github.io/posts/read/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%BC%E8%AE%BA%E6%9F%A5%E6%89%BE%E8%A1%A8/</link>
      <pubDate>Sat, 08 Oct 2022 16:17:45 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/read/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%BC%E8%AE%BA%E6%9F%A5%E6%89%BE%E8%A1%A8/</guid>
      <description>查找表 基本概念 查找表：由同一类型的数据元素构成的集合 关键字：用来标识数据元素的数据项，简称键，其值称为键值 主关键字：可唯一标识各个数据元素的关键字 查找：根据给定的某个 k 值，在查找表寻找一个其键值等于 k 的数据元素 静态查找表：进行的是引用型运算，操作为：建表、查找、读取表中元素。 动态</description>
    </item>
    
    <item>
      <title>《数据结构导论》线性表</title>
      <link>https://abeelan.github.io/posts/read/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%BC%E8%AE%BA%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
      <pubDate>Sat, 08 Oct 2022 16:17:45 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/read/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%BC%E8%AE%BA%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid>
      <description>概论 2. 线性表 ![image-20220407200207639](/Users/lan/Library/Application Support/typora-user-images/image-20220407200207639.png) 2.1 线性表的基本概念 2.2 线性表的顺序存储 2.2.1 线性表顺序存储的类型定义 2.2.2 线性表的基本运算在顺序表上的实现 定义数据结构 const int MaxSize = 100; typedef struct { int id; char name[10]; char sex; float score; } DataType; typedef struct { DataType data[10]; int length; } SeqList; 插入 void InsertSeqList(SeqList L, DataType x, int i) /* 元素插入 一般情况下，需要移动 n-i+1 次 最坏的情况下，插入队首元素，需要移动 n 次； 最好的情</description>
    </item>
    
    <item>
      <title>Jenkins - 安卓打包流程构建</title>
      <link>https://abeelan.github.io/posts/tech/jenkins/jenkins-apk-build/</link>
      <pubDate>Tue, 07 Sep 2021 18:38:09 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/jenkins/jenkins-apk-build/</guid>
      <description>测试 APP 构建、打包过程 准备 安卓源码 # https://github.com/princeqjzh/AndroidSampleApp.git $ git clone git@github.com:princeqjzh/AndroidSampleApp.git 安卓打包命令 # clean 清空 build 目录下的构建文件 # assemble 打包；比如 assembleRealese 或者渠道包 $ gradlew clean assembleDebug # APK 输出路径 # /app/build/outputs/apk/debug/app-debug.apk 打包环境要求 JDK Android SDK Gradle 编译完成后安装包 $ adb install app-debug.apk Success 总结 配置 job 1 用于构建 APP； 配置 job 2 用于构建 自动化测试（子节点 - 模拟器运行）； 父子关联（job 1 添加稳</description>
    </item>
    
    <item>
      <title>Jenkins - 接口自动化测试流水线搭建</title>
      <link>https://abeelan.github.io/posts/tech/jenkins/jenkins-pipline-esbook/</link>
      <pubDate>Tue, 07 Sep 2021 18:38:09 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/jenkins/jenkins-pipline-esbook/</guid>
      <description>1、安装 Jenkins 插件 Extended Choice Parameter：参数化 stage view：用于展示流水线进度视图 groovy postbuild：执行 groovy 脚本请求 allure：报告展示 2、安装 allure 安装 node 先安装 node，未安装 node 直接启动 allure 会报错：/usr/bin/env: node: No such file or directory # 创建安装目录 $ mkdir node &amp;amp;&amp;amp; cd node # 下载安装包 $ wget https://npm.taobao.org/mirrors/node/v15.8.0/node-v15.8.0-linux-x64.tar.gz # 解</description>
    </item>
    
    <item>
      <title>Jenkins - 接口压力测试持续集成</title>
      <link>https://abeelan.github.io/posts/tech/jenkins/jenkins-%E6%8E%A5%E5%8F%A3%E5%8E%8B%E5%8A%9B%E5%AE%9E%E6%88%98/</link>
      <pubDate>Sat, 28 Aug 2021 17:20:15 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/jenkins/jenkins-%E6%8E%A5%E5%8F%A3%E5%8E%8B%E5%8A%9B%E5%AE%9E%E6%88%98/</guid>
      <description>&lt;p&gt;接口压力测试实战，集成到 jenkins 项目。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jenkins - 接口自动化测试持续集成</title>
      <link>https://abeelan.github.io/posts/tech/jenkins/jenkins-%E6%8E%A5%E5%8F%A3%E5%8A%9F%E8%83%BD%E5%AE%9E%E6%88%98/</link>
      <pubDate>Sat, 28 Aug 2021 17:20:02 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/jenkins/jenkins-%E6%8E%A5%E5%8F%A3%E5%8A%9F%E8%83%BD%E5%AE%9E%E6%88%98/</guid>
      <description>接口功能自动化测试项目集成到 jenkins 实战。 安装 python 在 jenkins 容器内安装 python 执行环境 $ docker exec -it -u root jenkins /bin/bash $ cat /etc/issue Debian GNU/Linux 1 # 根据 debian 版本更新下载源 # https://blog.csdn.net/lan_yangbi/article/details/86720257 $ apt-get update # 下载安装包 $ apt-get install wget $ wget https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tgz $ tar -zxvf Python-3.6.8.tgz # 编译安装 $ cd Python-3.6.8 $ ./configure --prefix=/opt/python3 --with-ssl $ apt-get -y install gcc automake autoconf libtool make $ apt-get -y install make* $ apt-get -y install zlib* $ apt-get -y install openssl libssl-dev $ apt-get install sudo $ make &amp;amp;&amp;amp; make install # 软链 $ ln -s /opt/python3/bin/python3.6 /usr/bin/python $ ln -s /opt/python3/bin/pip3 /usr/bin/pip 配</description>
    </item>
    
    <item>
      <title>jenkins - 环境搭建</title>
      <link>https://abeelan.github.io/posts/tech/jenkins/jenkins/</link>
      <pubDate>Fri, 27 Aug 2021 14:03:35 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/jenkins/jenkins/</guid>
      <description>持续集成测试流程记录。 jenkins 搭建 # 创建或者映射 docker 文件映射卷；二选一 $ docker volume create jenkins # 创建新的映射卷 $ docker volume inspect jenkins # 本地文件映射 # 创建容器;lts 长期维护版本，稳定版本 $ docker run -d --name jenkins -p 8080:8080 -p 5000:5000 -v {本地目录}/jenkins:/var/jenkins_home jenkins/jenkins:lts # 获得管理员密码 $ docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword 插件 可以先配</description>
    </item>
    
    <item>
      <title>K8s - 基础知识记录</title>
      <link>https://abeelan.github.io/posts/tech/docker/k8s-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 27 Aug 2021 13:59:19 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/k8s-%E5%9F%BA%E7%A1%80/</guid>
      <description>一切皆资源 pod service deployment &amp;hellip; 集群部署工具：kubeadm（官方） 参考链接：https://www.kubernetes.org.cn/7189.html kubectl -&amp;gt; 运行命令，操控集群 kubelet -&amp;gt; 与集群通信、鉴权、认证等等，一般在 kubeadm 内自动安装 kubeadm -&amp;gt; 部署工具 机器低于两核会直接报错，部署不起来。 kubectl $ kubectl 动作(get</description>
    </item>
    
    <item>
      <title>Docker - 常见问题</title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-question/</link>
      <pubDate>Wed, 25 Aug 2021 17:01:33 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-question/</guid>
      <description>关于 docker 的一些问题。 问题汇总 问题 1：在 selenium grid 中，多个 node 是在同一机器上，依然是在单机上执行自动化测试，如何将这些 node 分布到不同的机器上？ $ docker exec -it chrome bash $ env | grep HUB HUB_PORT_4444_TCP_ADDR=172.17.0.3 HUB_PORT_4444_TCP_PORT=4444 --link hub 的原理是将目标容器的 HUB 信息以环境变量的形式注入到容器内，如果两个容器不在同一机器上无法使用 &amp;ndash;link 参数。 那么，在其他机器上启动容</description>
    </item>
    
    <item>
      <title>YApi - 平台搭建记录（一）</title>
      <link>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/yapi-deploy/</link>
      <pubDate>Wed, 25 Aug 2021 15:03:01 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/yapi-deploy/</guid>
      <description>YApi 是比较好用的接口管理平台，通过 docker-compose 搭建记录。</description>
    </item>
    
    <item>
      <title>YApi - 沙箱漏洞修复记录（二）</title>
      <link>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/yapi-using/</link>
      <pubDate>Wed, 25 Aug 2021 15:03:01 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/yapi-using/</guid>
      <description>Yapi 是比较好用的接口管理平台，之前写过一篇关于搭建过程的文章。 YApi - 通过docker搭建接口管理平台 本篇文章，记录下使用过程中遇到的问题。 YAPI 安全漏洞解决方法 Yapi 使用的脚本执行沙箱存在安全漏洞问题，需要更换为更安全的沙箱 safeify。详情参考 yapi 安全漏洞详解 也可以一并解决，断言脚本报错问</description>
    </item>
    
    <item>
      <title>测试基础 - 软件测试方法与理论</title>
      <link>https://abeelan.github.io/posts/tech/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E4%B8%8E%E7%90%86%E8%AE%BA/</link>
      <pubDate>Wed, 25 Aug 2021 15:03:01 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E4%B8%8E%E7%90%86%E8%AE%BA/</guid>
      <description>1. 软件开发流程 软件包含：程序、文件、文档、数据 软件开发流程演变：传统瀑布模型 → 敏捷开发模型 → DevOps 模型 瀑布模型 瀑布模型流程：需求分析 → 设计 → 编码 → 实现 → 软件测试 → 完成 → 维护 瀑布模型特点：线性 瀑布模型优点：阶段清晰、强调早期计划和需求调查、适合需求稳定产品 瀑布模型缺点：增加开发风险、错</description>
    </item>
    
    <item>
      <title>Docker - 搭建 selenium 分布式测试环境</title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-selenium/</link>
      <pubDate>Wed, 25 Aug 2021 11:08:05 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-selenium/</guid>
      <description>docker 实战演练，搭建测试平台。 搭建分布式 UI 自动化测试环境 自动化测试发展从刚开始的单机单线程到单机多线程再到多机分布式操作。 UI 自动化测试通过 Grid hub 分发用例到不同的节点，执行用例。 grid 负载均衡是通过查看不同节点启动的浏览器数量，如果数量多证明繁忙，会优先分发到浏览器数量少的node上 github 搜索 docker-</description>
    </item>
    
    <item>
      <title>Docker - 了解与基本使用</title>
      <link>https://abeelan.github.io/posts/tech/docker/docker/</link>
      <pubDate>Tue, 24 Aug 2021 14:26:21 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker/</guid>
      <description>Docker 是一个开源的应用容器引擎，基于 GO 语言开发，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的系统。 介绍 优点 快速交付应用。加快打包时间，加快测试，加快发布，缩短开发及运行代码之间的周期； 复杂环境管理，应用隔离。不同软件运行环境兼容依赖问题，开发</description>
    </item>
    
    <item>
      <title>Burpsuite - 基本使用</title>
      <link>https://abeelan.github.io/posts/tech/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/burpsuite%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 17 Aug 2021 11:41:51 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/burpsuite%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>扫盲贴，简单了解一下。 相对开放、定制性强、黑客工具、测试工具 重要特性： 代理工具（Proxy） 爬虫（Spider）：对网站进行爬取 暴力破解（Intruder）：对接口的参数进行数据注入 漏洞扫描（Scanner 付费） 重放请求（Repeater） 附属工具（decode comparer）</description>
    </item>
    
    <item>
      <title>JSR223 自定义脚本</title>
      <link>https://abeelan.github.io/posts/tech/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/jsr223-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Tue, 17 Aug 2021 11:41:51 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/jsr223-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC/</guid>
      <description>JSR223 JSR223 是 Java Specification Request 223 的缩写，它定义了一种标准的接口和机制，用于在Java虚拟机中运行基于脚本的语言（例如Groovy、JavaScript等）的脚本引擎。在JMeter中，JSR223断言可以使用多种脚本语言编写验证逻辑，包括 Groovy、JavaScript、Python 等。 JSR223 断言是</description>
    </item>
    
    <item>
      <title>MeterSphere - 使用问题记录</title>
      <link>https://abeelan.github.io/posts/tech/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/metersphere/</link>
      <pubDate>Tue, 17 Aug 2021 11:41:51 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/metersphere/</guid>
      <description>metersphere 接口平台 需求：设置请求前置脚本，修改 「请求体」 内容，然后用更新后的请求体发起请求。 调试如下接口： 接口：https://httpbin.org/post 方法：post 请求体： { &amp;#34;name&amp;#34;: &amp;#34;John&amp;#34;, &amp;#34;age&amp;#34;: 30, &amp;#34;address&amp;#34;: { &amp;#34;street&amp;#34;: &amp;#34;123 Main St&amp;#34;, &amp;#34;city&amp;#34;: &amp;#34;Anytown&amp;#34;, &amp;#34;state&amp;#34;: &amp;#34;CA&amp;#34;, &amp;#34;zip&amp;#34;: &amp;#34;12345&amp;#34; } } 将 address 的值，修改为字符串，其他字段保持不变。 实现 新增 beanshell 脚本 import org.json.JSONObject; log.info(&amp;#34;Output &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;#34;); // 获</description>
    </item>
    
    <item>
      <title>安全测试 - 了解</title>
      <link>https://abeelan.github.io/posts/tech/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E4%BA%86%E8%A7%A3%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Tue, 17 Aug 2021 11:37:46 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E4%BA%86%E8%A7%A3%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/</guid>
      <description>&lt;p&gt;接口安全测试基础知识&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安全测试 - 常见漏洞（dvwa案例演示）</title>
      <link>https://abeelan.github.io/posts/tech/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95-dvwa%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Fri, 13 Aug 2021 17:55:30 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95-dvwa%E6%BC%8F%E6%B4%9E/</guid>
      <description>接口安全测试，常见漏洞了解和案例演示。 命令注入漏洞 原理 命令注入是一种攻击，其目标是通过易受攻击的应用程序在主机操作系统上执行任意命令。 当应用程序将用户提供的不安全数据（表格、cookie、http 标头等）传递到 shell 时，可能会发生命令注入攻击。在这种攻击中，通常由易受攻击的应用程序以</description>
    </item>
    
    <item>
      <title>iOS - WDA 使用记录</title>
      <link>https://abeelan.github.io/posts/tech/ios/ios-wda/</link>
      <pubDate>Fri, 13 Aug 2021 15:34:08 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/ios/ios-wda/</guid>
      <description>&lt;p&gt;WDA 更新了，重新安装并进行自动化测试！&lt;/p&gt;
&lt;p&gt;完成哈罗摩托的自动化任务！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Typora - 配置 Gitee 图床功能（归档）</title>
      <link>https://abeelan.github.io/posts/tech/%E5%85%B6%E4%BB%96/typora-%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Fri, 13 Aug 2021 10:48:05 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%85%B6%E4%BB%96/typora-%E5%9B%BE%E5%BA%8A/</guid>
      <description>在后面的某一天，gitee 图床链接突然全都不能用了~ 归档~</description>
    </item>
    
    <item>
      <title>Mac - SVN 命令及使用记录</title>
      <link>https://abeelan.github.io/posts/tech/mac/svn-mac-%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 06 Jun 2021 18:32:37 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/mac/svn-mac-%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>记录下 Mac 上的 SVN 命令行使用，脑子不好总是忘记。 安装 $ brew install svn Error: homebrew-core is a shallow clone. homebrew-cask is a shallow clone. To `brew update`, first run: git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow 出现报错，按照提示 git 合并下分支 $ brew install svn Error: python@3.9: wrong number of arguments (given 1, expected 0) 出现报错，手动更新下。 $ brew update Already up-to-date. 再次安装 $ brew install svn ... 常用命令 下载仓库代码（checkout） $ svn co {project_link}</description>
    </item>
    
    <item>
      <title>Pycharm - Plugins PlantUML integration</title>
      <link>https://abeelan.github.io/posts/tech/python/pycharm-plantuml/</link>
      <pubDate>Tue, 11 May 2021 11:03:40 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/python/pycharm-plantuml/</guid>
      <description>插件介绍 PlantUML 是画程序时序图的，Pycharm 有插件，可以创建 *.puml 文件，非常方便。 官方网站：http://plantuml.com/sequence-diagram 在线使用：https://plantuml.ceshiren.com/uml/SyfFKj2rKt3CoKnELR1Io4</description>
    </item>
    
    <item>
      <title>Mac - 电脑直播 OBS 配置（没成功）</title>
      <link>https://abeelan.github.io/posts/tech/mac/mac-obs%E7%9B%B4%E6%92%AD/</link>
      <pubDate>Thu, 06 May 2021 18:32:37 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/mac/mac-obs%E7%9B%B4%E6%92%AD/</guid>
      <description>下载 OBS 推流软件 地址：https://obsproject.com/ 使用方法： 新建场景（来源 + 号） - 选择「显示器采集」，根据需求添加摄像头、麦克风等 右键「显示器采集」，选择「调整输出大小（到源大小）」 菜单栏进入设置页面，选中「推流」子菜单，服务选择「自定义」 平台直播 去直播平台获取推</description>
    </item>
    
    <item>
      <title>考个摩托车驾照</title>
      <link>https://abeelan.github.io/posts/life/%E6%91%A9%E6%89%98%E8%BD%A6/</link>
      <pubDate>Thu, 08 Apr 2021 16:17:45 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/life/%E6%91%A9%E6%89%98%E8%BD%A6/</guid>
      <description>有天早上，媳妇跟我说晚上做梦，梦里特别需要摩托车驾照，然后鼓励我成为一名骑士； 正合我意，开帖记录摩托车考驾照。 驾照 报名（2021.5.9） 驾校：京都府（朋友推荐，离住处距离近，有班车，昌平） 费用 培训：周末班 ¥ 1590；加上体检照相费用共 ¥ 1643； 考试：考试费用单独交，共计 160 沙河</description>
    </item>
    
    <item>
      <title>iOS - 使用快捷指令做的小功能</title>
      <link>https://abeelan.github.io/posts/tech/ios/ios-%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Tue, 06 Apr 2021 18:48:45 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/ios/ios-%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/</guid>
      <description>&lt;p&gt;下班自动提醒的快捷指令工具 🕙&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux - 常用命令汇总</title>
      <link>https://abeelan.github.io/posts/tech/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 06 Apr 2021 18:43:19 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>系统 $ uname -a # 查看内核/操作系统/CPU信息 $ head -n 1 /etc/issue # 查看操作系统版本 $ cat /proc/cpuinfo # 查看CPU信息 $ hostname # 查看计算机名 $ lspci -tv # 列出所有PCI设备 $ lsusb -tv # 列出所有USB设备 $ lsmod # 列出加载的内核模块 $ env # 查看环境变量 # 查看 CPU 信息（型号）看到有 8 个逻辑 CPU, 也知道了 CPU 型号 $ cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</description>
    </item>
    
    <item>
      <title>Linux - 本机登录远程服务器，文件上传与下载</title>
      <link>https://abeelan.github.io/posts/tech/linux/%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8rz%E5%92%8Csz/</link>
      <pubDate>Tue, 06 Apr 2021 18:43:19 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/linux/%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8rz%E5%92%8Csz/</guid>
      <description>rz &amp;amp; sz 命令使用 🔧 操作系统：macOS Catalina 10.15.7 软件版本：secureCRT Version 8.7.3 (build 2279) rz: Receive Zmodem sz: Send Zmodem rz 和 sz 都是使用 Zmodem 文件传输协议 sz 从服务器传输文件到电脑，对于服务器来说，是发送（send），所以 sz # 单个文件 $ sz {filename} # 多个文件 $ sz {filename1} {filename2} # 目录下文件 $ sz {dirname}/* 文件下载默认路径：~/Document 设置自</description>
    </item>
    
    <item>
      <title>Mac - ohmyzsh 设置主题样式</title>
      <link>https://abeelan.github.io/posts/tech/mac/%E7%BB%88%E7%AB%AFohmyzsh%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A2%98/</link>
      <pubDate>Tue, 06 Apr 2021 18:32:37 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/mac/%E7%BB%88%E7%AB%AFohmyzsh%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A2%98/</guid>
      <description>为 ohmyzsh 设置新的主题样式 🎉 点击跳转官方主题展示 $ vi ~/.zshrc # 找到这一行，修改为自己喜欢的主题名称 ZSH_THEME=&amp;#34;ys&amp;#34; # 修改保存后，使配置生效 $ source ~/.zshrc</description>
    </item>
    
    <item>
      <title>Mac - 安装 android-sdk</title>
      <link>https://abeelan.github.io/posts/tech/mac/%E5%AE%89%E8%A3%85android-sdk/</link>
      <pubDate>Tue, 06 Apr 2021 18:32:37 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/mac/%E5%AE%89%E8%A3%85android-sdk/</guid>
      <description>方式一 下载地址：http://tools.android-studio.org/index.php/sdk 下载完成后运行 tools -&amp;gt; android，安装 platform-tools 配置环境变量 完成安装！ 方式二 $ brew install android-sdk $ brew install android-platform-tools 方式三：推荐 使用 Android studio 管理。</description>
    </item>
    
    <item>
      <title>Mac - 安装 JDK17</title>
      <link>https://abeelan.github.io/posts/tech/mac/%E5%AE%89%E8%A3%85jdk17/</link>
      <pubDate>Tue, 06 Apr 2021 18:32:37 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/mac/%E5%AE%89%E8%A3%85jdk17/</guid>
      <description>下载地址：https://www.oracle.com/java/technologies/downloads/#jdk17-mac 选择 x64 DMG Installer 下载完成后，一路下一步完成安装。 查看当前机器安装的所有 Java 版本 $ /usr/libexec/java_home -V 17.0.2 (x86_64) &amp;#34;Oracle Corporation&amp;#34; - &amp;#34;Java SE 17.0.2&amp;#34; /Library/Java/JavaVirtualMachines/jdk-17.0.2.jdk/Contents/Home 11.0.2 (x86_64) &amp;#34;Oracle Corporation&amp;#34; - &amp;#34;Java SE 11.0.2&amp;#34; /Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home 1.8.231.11 (x86_64) &amp;#34;Oracle Corporation&amp;#34; - &amp;#34;Java&amp;#34; /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home # JRE 1.8.0_231 (x86_64) &amp;#34;Oracle Corporation&amp;#34; - &amp;#34;Java SE 8&amp;#34;</description>
    </item>
    
    <item>
      <title>Mac - 解决 jetbrains 全家桶无法打开</title>
      <link>https://abeelan.github.io/posts/tech/mac/jetbrains-%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/</link>
      <pubDate>Tue, 06 Apr 2021 18:32:37 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/mac/jetbrains-%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/</guid>
      <description>点击程序坞上面的应用程序，跳动两下就没有然后了，无法打开程序；附上解决办法。 前几天改了电脑的用户名称，导致一部分软件都没办法启动；原因是软件的配置文件依然保存原用户名的路径，启动时未获取到目录地址，所以报错了。 以 Pycharm 为例 找到命令行执行程序：「应用程序」- 右键「显示包内容」- Contents - MacOS -</description>
    </item>
    
    <item>
      <title>iOS - 编译 wda 问题记录</title>
      <link>https://abeelan.github.io/posts/tech/ios/ios-%E7%BC%96%E8%AF%91wda%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 06 Apr 2021 18:23:39 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/ios/ios-%E7%BC%96%E8%AF%91wda%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;p&gt;编译 webDriverAgent 遇到的问题记录&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS - tidevice 使用</title>
      <link>https://abeelan.github.io/posts/tech/ios/ios-tidevice%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 06 Apr 2021 18:15:52 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/ios/ios-tidevice%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;让 iOS 拥有像安卓 adb 一样的命令行工具。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git - 报错信息记录</title>
      <link>https://abeelan.github.io/posts/tech/git/git-%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 06 Apr 2021 17:10:35 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/git/git-%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/</guid>
      <description>使用过程中遇到的报错信息记录。 问题：下载仓库时报错 443 $ git clone xxx Cloning into &amp;#39;xxx&amp;#39;... fatal: unable to access &amp;#39;xxx&amp;#39;: Failed to connect to github.com port 443: Operation timed out 取消全局代理，问题解决。 $ git config --global --unset http.proxy $ git config --global --unset https.proxy Mac 在无线设置中，代理项内手动关闭也行。 问题：fatal: not a git repository (or any of the parent directories) 原因：命令必须在 git 仓库目录内执行（git init除外），在仓</description>
    </item>
    
    <item>
      <title>Git - 速查笔记</title>
      <link>https://abeelan.github.io/posts/tech/git/git-%E9%80%9F%E6%9F%A5%E8%A1%A8/</link>
      <pubDate>Tue, 06 Apr 2021 17:10:35 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/git/git-%E9%80%9F%E6%9F%A5%E8%A1%A8/</guid>
      <description>常用命令记录，速查速记&amp;hellip; 全局配置 # --global 参数：表示机器上所有的仓库都会使用这个配置 # 设置全局用户名和邮箱 # 因为 git 是分布式版本控制系统，机器需要自报家门 $ git config --global user.name &amp;#34;Your Name&amp;#34; $ git config --global user.email &amp;#34;emai@example.com&amp;#34; # 设置 git 命令行颜色 $ git config --global color.ui true # 设置 git 默认分支名为 main git config --global init.defaultBranch main # 配置别名 # https://www.liaoxuefeng.com/wiki/896043488029600/898732837407424 $ git config --global alias.co checkout $ git config</description>
    </item>
    
    <item>
      <title>Hugo - 搭建博客（归档一）</title>
      <link>https://abeelan.github.io/posts/tech/%E5%85%B6%E4%BB%96/hugo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2v1/</link>
      <pubDate>Tue, 06 Apr 2021 17:10:35 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%85%B6%E4%BB%96/hugo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2v1/</guid>
      <description>Hugo 是使用 Go 语言编写的 静态网站生成器，页面编译速度快，支持跨平台、皮肤自定义，方便部署。 Hugo is a fast and modern static site generator written in Go, and designed to make website creation fun again. 搭建教程，官方教程写的非常详细，下文是我自己的搭建记录 👀 安装 使用 Mac Homebrew 进行安装 # 跳过 brew 检查更新（可以忽略） $ export HOMEBREW_NO_AUTO_UPDATE=true # 开始安装 $ brew install hugo # 出现下面内容就是安装完成</description>
    </item>
    
    <item>
      <title>Python - else 语法总结</title>
      <link>https://abeelan.github.io/posts/tech/python/python-else%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 06 Apr 2021 17:10:35 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/python/python-else%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>记录一个小知识… 问题 阅读别人代码，有点疑惑，精简后如下： def code_example(arg=None): for i in range(5): if arg: break else: print(&amp;#39;else branch&amp;#39;) 循环语句后面直接跟了 else 语句，未报错，程序正常运行。一般 else 都是配合判断语句用，那么这里的 else 是什么作用呢？ 尝试 for i in range(2): print(i) else: print(&amp;#34;else branch&amp;#34;) &amp;gt;&amp;gt;&amp;gt; 0 1 else branch test01：根据打印信息发现，for 循环正常执行完成后执行了 else 分支</description>
    </item>
    
    <item>
      <title>Python - 递归练习</title>
      <link>https://abeelan.github.io/posts/tech/python/python-%E9%80%92%E5%BD%92%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Tue, 06 Apr 2021 17:10:35 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/python/python-%E9%80%92%E5%BD%92%E7%BB%83%E4%B9%A0/</guid>
      <description>递归学习，通过汉诺塔游戏加强理解！ 递归 在一个函数内部调用自身本身，就是递归函数。 阶乘 5 的阶乘为：5*4*3*2*1 n 的阶乘为：1*2*3*…*(n-1) 所以其实就是n*(n-1)的循环，只有当n=1时，需要特殊处理。 # 递归实现，暂不考虑负数和零 def fact(n): if n == 1: return 1 return n * (fact(n-1)) &amp;gt;&amp;gt;&amp;gt; fact(5) 120 当计算</description>
    </item>
    
    <item>
      <title>Android - adb 连接不上设备解决办法</title>
      <link>https://abeelan.github.io/posts/tech/andorid/adb%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E5%8E%9F%E5%9B%A0/</link>
      <pubDate>Thu, 21 Jan 2021 15:35:52 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/andorid/adb%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E5%8E%9F%E5%9B%A0/</guid>
      <description>adb 连接不上设备的解决办法。 首先确保电脑上的android-platform-tools版本与设备的API版本匹配。 $ adb --version Android Debug Bridge version 1.0.40 Version 4986621 Installed as /usr/local/Caskroom/android-platform-tools/28.0.1/platform-tools/adb 比如上面，我电脑的adb版本是28，连接一个10.0系统(API 29)的设备，死活连接不上。。。 所以当遇到设备无法连接，先检查或尝试更新ad</description>
    </item>
    
    <item>
      <title>Android - OPPO 安装包取消手机验证码</title>
      <link>https://abeelan.github.io/posts/tech/andorid/oppo%E5%AE%89%E8%A3%85apk%E8%A7%84%E9%81%BF%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/</link>
      <pubDate>Thu, 21 Jan 2021 15:35:52 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/andorid/oppo%E5%AE%89%E8%A3%85apk%E8%A7%84%E9%81%BF%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/</guid>
      <description>使用测试机安装开发版应用包时，会弹出密码弹框。测试机多人使用，不知道密码，该怎么绕过弹窗，从而装上包呢？ 安装软件需要密码怎么关闭？经常使用OPPO手机的用户都知道，在安装第三方下载的软件时，需要输入密码进行验证身份，那安装软件需要密码怎么关闭呢，下面就和小编一起来看看吧！ OPPO</description>
    </item>
    
    <item>
      <title>Android - uiautomator2 常用 API 汇总</title>
      <link>https://abeelan.github.io/posts/tech/andorid/u2/</link>
      <pubDate>Thu, 21 Jan 2021 15:35:52 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/andorid/u2/</guid>
      <description>命令行 # 帮助文档 $ python -m uiautomator2 # 查看版本号 $ uiautomator2 version # 初始化 手机安装 atx、minicap 等 $ uiautomator2 init # 获取当前包名信息 $ uiautomator2 current # 安装包，支持 url 安装 $ uiautomator2 install demo.apk # 卸载 $ uiautomator2 uninstall demo.apk # 启动应用 $ uiautomator2 start 包名 # 停止应用 $ uiautomator2 stop 包名 # 下载初始化安装的应用 $ uiautomator2 purge 常用 api import uiautomator2 as u2 # 连接单台设备 d = u2.connect() # 连接指定设备 d = u2.connect(serialNo) # 通</description>
    </item>
    
    <item>
      <title>Android - 启动时间分析</title>
      <link>https://abeelan.github.io/posts/tech/andorid/%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 21 Jan 2021 15:35:52 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/andorid/%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4%E5%88%86%E6%9E%90/</guid>
      <description>APP 启动首屏基本上都是以颜色来标识，而不是图片，目的是为了适配更多分辨率不同的机型。 APP 启动方式 COLD（冷启动）：杀死应用进程后启动 WARM（暖启动）：BACK 退出应用后启动 HOT（热启动）：应用置为后台再启动 冷启动流程 第一阶段 加载并启动 APP 启动后立即显示一个空白的窗口 创建 APP 进程 第二</description>
    </item>
    
    <item>
      <title>Android - 基础了解</title>
      <link>https://abeelan.github.io/posts/tech/andorid/android%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 21 Jan 2021 15:35:52 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/andorid/android%E5%9F%BA%E7%A1%80/</guid>
      <description>Android/iOS 基础知识 Android 是通过容器的布局属性来管理子控件的位置关系，布局过程就是把界面上的所有控件根据间距大小摆放到正确的位置。 布局是一种可放置很多控件的容器，它可以按照一定得规律调整内部控件的位置，从而编写精美的界面。布局内部除了放置空间外，也可以放置布局，通过多布局的嵌套，能完成一些很复</description>
    </item>
    
    <item>
      <title>Android - 安装包加固后闪退</title>
      <link>https://abeelan.github.io/posts/tech/andorid/android-%E5%AE%89%E8%A3%85%E5%8C%85%E5%8A%A0%E5%9B%BA%E5%90%8E%E9%97%AA%E9%80%80%E7%9A%84%E5%89%AF%E6%9C%AC/</link>
      <pubDate>Thu, 21 Jan 2021 15:35:52 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/andorid/android-%E5%AE%89%E8%A3%85%E5%8C%85%E5%8A%A0%E5%9B%BA%E5%90%8E%E9%97%AA%E9%80%80%E7%9A%84%E5%89%AF%E6%9C%AC/</guid>
      <description>这版本测试时，出现装包后启动 CRASH 的情况（仅在部分机型上面出现），出现该问题后，APP 一直无法正常启动，重新安装后，启动正常；尝试定位问题。 闪退日志： java.lang.UnsatisfiedLinkError:dlopenfailed: library &amp;#34;/data/data/cn.wejuan.reader/.jiagu/libjiagu.so&amp;#34; not found 问题排查： 看日志应该是加固的问题， 启动时文件创建失败导致未找到； 没有任何 APP 相关的报错信息； 非必现。 BUG 复现步骤： 手动重复安装卸</description>
    </item>
    
    <item>
      <title>Android - 快应用测试方法</title>
      <link>https://abeelan.github.io/posts/tech/andorid/%E5%BF%AB%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Thu, 21 Jan 2021 15:35:52 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/andorid/%E5%BF%AB%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95/</guid>
      <description>快应用测试 准备 下载快应用环境(https://www.quickapp.cn/docCenter/post/69)，分别下载： 快应用预览版 快应用调试器 客户端提测后，拿到 rpk 安装包并下载到手机上。 安装 打开快应用调试器，选择本地安装，选择 rpk文件，即可安装成功。</description>
    </item>
    
    <item>
      <title>Android - 闪退日志提取</title>
      <link>https://abeelan.github.io/posts/tech/andorid/android-%E9%97%AA%E9%80%80%E6%97%A5%E5%BF%97%E6%8F%90%E5%8F%96%E7%9A%84%E5%89%AF%E6%9C%AC/</link>
      <pubDate>Thu, 21 Jan 2021 15:35:52 +0800</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/andorid/android-%E9%97%AA%E9%80%80%E6%97%A5%E5%BF%97%E6%8F%90%E5%8F%96%E7%9A%84%E5%89%AF%E6%9C%AC/</guid>
      <description>&lt;p&gt;安卓手机测试过程中，遇到应用闪退，通常需要在 &lt;code&gt;BUG&lt;/code&gt; 信息上附加崩溃日志，便于开发同学快速定位问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-android/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-android/</guid>
      <description>https://github.com/budtmo/docker-android 首先检查服务器是否支持虚拟化技术:https://linux.cn/article-9516-1.html $ egrep --color -i &amp;#34;svm|vmx&amp;#34; /proc/cpuinfo 如果出现红字就代表机器支持，否则不支持。 windows 项目地址：https://github.com/budtmo/docker-android $ docker run --privileged \ -d -p 6080:6080 -p 5554:5554 -p 5555:5555 \ -e</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-compose-%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-compose-%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB/</guid>
      <description>汇总遇到的报错信息。 1. ParserError: while parsing a block mapping $ docker-compose down ERROR: yaml.parser.ParserError: while parsing a block mapping in &amp;#34;./compose.yml&amp;#34;, line 1, column 1 expected &amp;lt;block end&amp;gt;, but found &amp;#39;&amp;lt;block mapping start&amp;gt;&amp;#39; in &amp;#34;./compose.yml&amp;#34;, line 25, column 3 原因是空格导致未对齐，检查 25 行格式错误。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-compose/</guid>
      <description>Dcoekr-compose 简介 Docker-compose 是用于定义和运行多容器的 Docker 应用程序的工具。通过 compose，可以使用 yaml 文件来配置应用程序的服务。compose 的使用一般分为三步： 使用 Dockerfile 定义应用程序的环境，以便可以在任何地方复制它； 在 docker-compose.yml 中定义组成应用程序的服务，以便他们可以在隔离的环境中一起运行； 运行 docker-compose up，然后 compose 启动</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-gitlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-gitlab/</guid>
      <description>docker 部署 Gitlab 拉取镜像 $ docker pull gitlab/gitlab-ce:latest 启动容器 #!/bin/bash NAME=gitlab VOLUMES=/data1/docker/gitlab/volumes HOST=`ifconfig eth1 | grep &amp;#39;inet&amp;#39; | awk &amp;#39;{print $2}&amp;#39;` if [[ -n $(docker ps -a -q -f &amp;#34;name=^$NAME$&amp;#34;) ]]; then docker rm -f $NAME; fi docker run -d --name $NAME \ --hostname $HOST \ --publish 4433:443 \ --publish 8880:80 \ --publish 222:22 \ --restart always \ -v $VOLUMES/config:/etc/gitlab \ -v $VOLUMES/logs:/var/log/gitlab \ -v $VOLUMES/data:/var/opt/gitlab \ gitlab/gitlab-ce:latest 启动后，初始化非常慢，耐心等待 $ docker logs -f gitlab ... 查看初始化登录密码 $ docker exec -it gitlab bash $ cat /etc/gitlab/initial_root_password Password: GVmOPy613BipQ38T5xdEpjS/Q/yWCgnHq7KQJJyhHpI= # 重置初始化密码 $ gitlab-rails console Loading production environment (Rails 6.1.4.1) irb(main):001:0&amp;gt; user=User.where(id:1).first =&amp;gt; #&amp;lt;User id:1 @root&amp;gt; irb(main):002:0&amp;gt; user.password=&amp;#39;12345678&amp;#39;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-jenkins/</guid>
      <description>Docker 搭建 Jenkins 服务 从零搭建服务 历史服务迁移至 docker 一、从零搭建服务 拉取镜像 # lts: Long Term Support $ docker pull jenkins/jenkins:lts 注意注意注意！！！ 默认镜像 jenkins:latest 版本已经废弃，拉取时手动指定 lts 长期维护版本。 启动容器 需要挂载的内容太多，将容器启动命令封装为 shell 脚本，方便使用。 #!/bin/bash name=jenkins if [[ -n $(docker ps -q -f &amp;#34;name=^$name$&amp;#34;) ]]; then docker rm -f $name; fi # 将宿主机 docker 挂载进来，否则</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-nginx/</guid>
      <description>使用 Nginx 搭建 Web 服务 Nginx 简介 Nginx (engine x) 是一个高性能的 HTTP 和反向代理 WEB 服务器，通过简单的配置文件即可快速提供服务，性能稳定，系统资源占用少，并发能力强。 反向代理：服务器将收到的请求分发到其他服务器 负载均衡：流量均匀的分布到后端的服务器上 HTTP 缓存：缓存服务器，提高用户访问速度 DEMO 拉取镜像 $ docker pull nginx:latest 启动</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-registry/</guid>
      <description>搭建镜像仓库 $ docker pull registry:2 $ docker run -d -p 5000:5000 -v /usr/local/registry:/var/lib/registry --restart=always --name registry registry:2 # --restart=always 代表容器万一挂掉，docker 会永远重启容器 # DEMO # 先下载一个小镜像 $ docker pull busybox # 上传镜像前需要更新名字，命名规范 ==&amp;gt; IP地址:端口号/名称:版本号； # 上面 pull busybox，其实应该是 library/busybox:latest # library 是docker默认仓库地址，版本号不写默认是lat</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-sonarqube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-sonarqube/</guid>
      <description>启动容器 $ docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9000:9000 sonarqube:latest</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-sonic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-sonic/</guid>
      <description>本文通过 docker 在服务器上搭建 sonic 真机平台 simple 版本。 部署文档：https://sonic-cloud.gitee.io/#/Deploy 1、创建数据库 $ docker run --name=mysql -it -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_ROOT_HOST=% -d mysql:5.7 --character-set-server=utf8 --collation-server=utf8_general_ci # 进入mysql容器，创建数据库 $ docker exec -it mysql /bin/bash $ mysql -u root -p mysql&amp;gt; create database sonic; # 修改字符集和字符排序规则(没用) # mysql&amp;gt; SELECT CONCAT(&amp;#39;ALTER TABLE &amp;#39;, table_name,</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-testlink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-testlink/</guid>
      <description>搭建测试用例管理平台 Testlink Testlink 简介 Testlink 基于 WEB 的测试用例管理系统，主要功能是测试项目管理、产品需求管理、测试用例管理、测试计划管理、测试用例的创建、管理和执行，并且还提供了统计功能。 部署数据库 # 创建一个名为 testlink 的容器网络 $ docker network create testlink # 查看当前存在的容器网络 $ docker network ls NETWORK ID NAME DRIVER SCOPE 备注（自己加的） 4deb334c55f6 bridge</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</guid>
      <description>Docker registry 简介 Docker Registry 是存储 Dcoker Image 的仓库，运行 push、pull、search 时，是通过 Docker daemon 与 docker registry 通信。有时候使用 Docker Hub 这样的公共仓库可能不方便，我们可以通过 registry 创建一个本地仓库。 运行 # 搭建仓库的主机运行 $ docker run -d -p 5000:5000 -v ${PWD}/registry:/var/lib/registry --restart always --name registry registry:2.7.1 # 其他机配置下镜像仓库 $ vim /etc/docker/daemon.json { &amp;#34;insecure-regi</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/</guid>
      <description>容器启动参数解释 端口映射（-p） docker 会在虚拟的容器网络内启动容器，容器网络内的容器之间可以互相通信，外部无法与容器进行通信，我们希望将宿主机（启动容器的机器）作为跳板，这样，用户可以将网络请求发送给宿主机，宿主机再转发请求到容器实现通信，所以需要端口映射。 $ docker run --name=hub -p 5001:4444 用户将请求发送</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/docker-%E9%9D%A2%E8%AF%95%E6%8F%90%E9%97%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/docker-%E9%9D%A2%E8%AF%95%E6%8F%90%E9%97%AE/</guid>
      <description>关于 docker 的一些问题。 问题 1：在 selenium grid 中，多个 node 是在同一机器上，依然是在单机上执行自动化测试，如何将这些 node 分布到不同的机器上？ $ docker exec -it chrome bash $ env | grep HUB HUB_PORT_4444_TCP_ADDR=172.17.0.3 HUB_PORT_4444_TCP_PORT=4444 --link hub 的原理是将目标容器的 HUB 信息以环境变量的形式注入到容器内，如果两个容器不在同一机器上无法使用 &amp;ndash;link 参数。 那么，在其他机器上启动容器的时候</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/docker/dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/docker/dockerfile/</guid>
      <description>Dockerfile 是由一系列指令和参数构成的脚本，一个 Dockerfile 里面包含了构建整个镜像的完整命令。 工作中，由于业务水平与技术选型不同，在使用 Docker 起服务时，需要定制项目镜像。通过两种方式： Docker commit Dockerfile Docker commit 基于一个运行状态的容器，在容器内安装项目运行所需要的环境依赖，再创建出一个新的镜像。 $ docker commit \ -a &amp;#34;author&amp;#34; \ -m &amp;#34;commit info&amp;#34; \ container_id \</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/ios/ios-%E7%88%B1%E7%BB%B4%E6%8A%A5%E5%A4%87%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/ios/ios-%E7%88%B1%E7%BB%B4%E6%8A%A5%E5%A4%87%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1/</guid>
      <description>本文介绍 iOS 设备自动化签到、完成每日任务。 环境 iPhone 15.4 xcode 12.4 tidevice 0.6.6 WebDriverAgent v4.8.4 初始化工作 # 安装 tidevice $ pip install -U tidevice # 安装 python wda client $ pip install -U facebook-wda # clone wda 源码 $ cd workspace $ git clone https://github.com/appium/WebDriverAgent.git $ cd WebDriverAgent # 目前的版本不需要执行 ./Scripts/bootstrap.sh # 双击打开 WebDriverAgent.xcodeproj 项目 编译安装 APP 请参考： IOS测试 | facebook-wda 环境搭建篇 出现如下报错信息需要信任开发者，点击「通用 - VPN与设备管</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/ios/tidevice%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/ios/tidevice%E4%BD%BF%E7%94%A8/</guid>
      <description>让 iOS 拥有像安卓 adb 一样的命令行工具。 需求 IOS 手机也能像安卓一样，做一个桌面工具，支持： 截图 获取手机信息 App 安装，启动，停止，查看 获取应用信息 指定应用性能采集（类似 PerfDog） 其他 最重要的是支持 Windows、Linux、Mac 跨平台使用。 工具确定 tidevice 感谢 codebluesky 发帖 &amp;amp; taobao-iphone-device 环境准备 电脑（先用 Mac</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/ios/wda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/ios/wda/</guid>
      <description>原理图 环境 iPhone 15.4 xcode 12.4 tidevice 0.6.6 WebDriverAgent v4.8.4 初始化工作 # 安装 tidevice $ pip install -U tidevice # 安装 python wda client $ pip install -U facebook-wda # clone wda 源码 $ cd workspace $ git clone https://github.com/appium/WebDriverAgent.git $ cd WebDriverAgent # 目前的版本不需要执行 ./Scripts/bootstrap.sh # 双击打开 WebDriverAgent.xcodeproj 项目 编译安装 APP 请参考： IOS测试 | facebook-wda 环境搭建篇 出现如下报错信息需要信任开发者，点击「通用 - VPN与设备管理 - 信任开发者」即可。 The operation coul</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/ios/xcode%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/ios/xcode%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>App Store 直接下载。 构建应用到真机 可以随意构建应用到模拟器。但是如果要构建到真机上的话，需要苹果的开发者证书。 开发者证书：调试真机设备 发布证书：将应用提交到 APPStore 设置证书和应用 ID 后，即可进行真机构建。 查看 bundleID 方式 如果报错提示 bundleId 不唯一，则需要在这里修改下，提交应用商店的唯一 ID，类似于安卓的包</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/ios/%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4%E6%89%93%E5%8D%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/ios/%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4%E6%89%93%E5%8D%A1/</guid>
      <description>下班自动提醒的快捷指令工具 🕙 iOS 快捷指令使用记录 公司弹性打卡，规则是这样：早上九点半之前到公司，那么下午六点半到七点之间，根据打卡时间弹性下班；早上晚于9点半到公司，需要多加半小时上班时间。 公司采用古老的手指打卡机系统，不提供查询打卡时间，经常忘记啥时候该下班，是否需要多加半小时；</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/ios/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/ios/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid>
      <description>环境准备 libimobiledevice 是一个跨平台的软件库，可以管理已安装应用，获取通讯录、日程、备注和书签等信息 # github.com/libimobiledevice/libimobiledevice $ brew install --HEAD libimobiledevice ideviceinstaller 是一个命令行工具，主要用于管理 ios 设备上应用程序的安装与卸载，以及查看相关信息 $ brew install ideviceinstaller carthage WDA 依赖 $ brew install carthage ios-deploy 终端安装和调试 iphone 应用的第三方开源库 $ brew install ios-deploy iwdp 通过 websocket 连接，代理来自 usbmuxd 守护进程的</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/jenkins/jenkins-docker-slave/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/jenkins/jenkins-docker-slave/</guid>
      <description>新建一个 docker slave 节点，并注册到 jenkins 上。 TODO：没有成功，直接在 pipeline 使用 docker 镜像运行 下载 docker 插件 Manage Jenkins：管理 Manage Plugins：插件管理 选中 Available 可用插件栏，搜索 docker 下载插件 Docker 下载插件 docker pipline 修改 docker 配置 开放外部连接 $ vim /lib/systemd/system/docker.service # ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375 # 重启服务 $ systemctl daemon-reload $ systemctl restart docker.service 配置云 Manage Jenkins：管理 configuration</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/jenkins/jenkins-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/jenkins/jenkins-%E5%9F%BA%E7%A1%80/</guid>
      <description>持续集成测试流程记录。 jenkins_pipeline_快速入门 38 jenkins_pipeline_语法详解 19 jenkins_pipeline_Sharedlib 8 jenkins_pipeline与k8s集成 8 jenkins_pipeline_jenkins集成k8s的原理和配置总结 8 jenkins_pipeline_多分支pi</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/jenkins/jenkinsfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/jenkins/jenkinsfile/</guid>
      <description>Jenkins Pipeline 一、概念 将整个持续集成的过程用解释性代码 jenkinsfile 来描述。 二、Jenkinsfile 使用方法 Pipeline script Pipeline script from SCM 1、Pipeline script 创建第一个 pipeline 项目 新建项目 输入项目名称 选择流水线项目 点击确定 进入配置页面，配置 pipeline 下拉到页面最底部，定义流水线脚本有两种方式，默认是在配置页面编辑脚本，也就是 Pipeline s</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/jenkins/k8s-easou/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/jenkins/k8s-easou/</guid>
      <description>Gogo - 一款极易搭建的自助 Git 服务。 官网：https://gogs.io/ 地址：http://gogs.ieasou.cn/ 账号：lanyangbi｜lanyangbi@6666 CI 平台 官网：https://www.drone.io/ 地址：http://drone2.ieasou.cn/</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/jenkins/k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/jenkins/k8s/</guid>
      <description>K8s 一切皆资源 pod service deployment &amp;hellip; 集群部署工具：kubeadm（官方） 参考链接：https://www.kubernetes.org.cn/7189.html kubectl -&amp;gt; 运行命令，操控集群 kubelet -&amp;gt; 与集群通信、鉴权、认证等等，一般在 kubeadm 内自动安装 kubeadm -&amp;gt; 部署工具 机器低于两核会直接报错，部署不起来。 kubectl $ kubectl 动作(ge</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/jenkins/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/jenkins/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/</guid>
      <description>每日构建自动化测试任务，搭建流程记录。 项目依赖 Docker Jenkins SVN Pytest Allure 准备工作 1、环境安装 Docker 安装 Docker 搭建 Jenkins 服务 2、插件安装 按下面路径进入插件市场，搜索插件名，勾选后安装即可。 Jenkins -&amp;gt; Manage Jenkins -&amp;gt; Manage Plugins -&amp;gt; 选中 Available 栏 # Install without restart 所需插件列表： Pipeline 流水线任务 Docker Docker Pipeline Subversion 代码管理仓库 Extended Choice Parameter 参数化构建 Allure：生成及展示 Allure 报</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/python/python-jmespath%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/python/python-jmespath%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>JMESPath is a query language for JSON. JMESPath 是 JSON 查询语言，可以从 JSON 文档中提取和转换元素。在做接口自动化测试项目时，最基础的一步就是从响应中获取各种待验证字段值，掌握 jmespath 语法，能达到事半功倍的效果。撸了一天官方文档，趁热记录下所学所得。 Try it Out! jmesath.py JMESPath Examples 安装 $ pip install jemspath jmespath.py 库提供了两个接口： def compile(expression): return parser.Parser().parse(expression) def search(expression, data, options=None): return parser.Parser().parse(expression).search(data, options=options) # options 可以通</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/python/python-requests-html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/python/python-requests-html/</guid>
      <description>requests-html API 使用示例。 官方文档 Github 移动端混合应用，除 API 接口外，还包含大量的 web 页面需要校验，进行自动化测试。 在 GitHub 上找到一个解析 HTML 页面的库，与 requests 库是同作者，大神出品，必属精品。哈哈，研究一下。 安装 仅支持 Python 3.6 及以上版本。 $ pip install requests-html 使用 请求数据的方法： 发送 web 请求，获取 HTML 响应 发送异步请求，异步获取 HTML 响</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/python/python-requests-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/python/python-requests-proxy/</guid>
      <description>通过 APP 发送一个请求，编写接口自动化测试脚本。 编写的过程中，如果脚本的请求跟实际不一致，通过代理的方式查看两次请求有什么不一致。 # 伪代码 proxies = { &amp;#34;http&amp;#34;: &amp;#34;http://127.0.0.1:8080&amp;#34;, &amp;#34;https&amp;#34;: &amp;#34;http://127.0.0.1:8080&amp;#34;, } r = requests.post(url=&amp;#34;http://www.baidu.com&amp;#34;, prixies=proxies, verify=Falses) 这样打开 charles，就可以代理脚本发出的请求，再通过客户端发送一条请求，这样就能对比出两条请求有什么区别。 作用： 对比</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/python/python-requests-xmltodict/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/python/python-requests-xmltodict/</guid>
      <description>xml 格式转换为 dict # 0.13 版本及以上 $ pip install xmltodict ![image-20221023223603798](/Users/lan/Library/Application Support/typora-user-images/image-20221023223603798.png) ![image-20221023224021093](/Users/lan/Library/Application Support/typora-user-images/image-20221023224021093.png)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/python/python-requests-%E6%8E%A5%E5%8F%A3%E9%89%B4%E6%9D%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/python/python-requests-%E6%8E%A5%E5%8F%A3%E9%89%B4%E6%9D%83/</guid>
      <description>接口鉴权的通用解决方案： 认证信息的获取 认证信息的携带 auth 鉴权请求方法 import requests from requests.auth import HTTOBasicAuth proxy = { &amp;#34;http&amp;#34;: &amp;#34;http://127.0.0.1:8888&amp;#34;, &amp;#34;https&amp;#34;: &amp;#34;https://127.0.0.1:8888&amp;#34; } r = requests.get( url=&amp;#34;https://baidu.com&amp;#34;, proxies=proxy, verify=False, auth=HttpBasicAuth(&amp;#34;username&amp;#34;, &amp;#34;password&amp;#34;) )</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/python/python-websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/python/python-websocket/</guid>
      <description>websocket 测试 from websocket import create_connection # 测试地址：http://www.websocket-test.com/ def websocket_protocol(): # 发起连接 ws = create_connection(&amp;#34;ws://IP或域名:端口&amp;#34;) # 获取服务器返回信息 result = ws.recv() print(result) # 发送请求信息 ws.send(&amp;#34;hello world&amp;#34;) result_send = ws.recv() print(result_send) ws.close()</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/chromedriver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/chromedriver/</guid>
      <description>批量杀死 chromedriver 进程 $ ps -ef \ | grep chromedriver | grep -v grep \ | awk &amp;#39;{print $2}&amp;#39; \ | awk &amp;#39;BEGIN{RS=&amp;#34;&amp;#34;;FS=&amp;#34;\n&amp;#34;;OFS=&amp;#34; &amp;#34;}{$1=$1;print $0}&amp;#39; \ | xargs kill -9</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/debug-%E5%A4%8D%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/debug-%E5%A4%8D%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8/</guid>
      <description>selenium debug 模式，远程调试，复用浏览器。 场景 比如测试京东购物流程，必须扫码登录成功后，才能进行后续操作。 用例编写调试时，每次运行都会打开一个新的浏览器窗口，得重新扫码登录才行。 原因是ChromeDriver默认每次被调用启动时都会加载一个新的会话，像这种频繁调试的场景，就比较浪费时间。 对</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/seleniumgrid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/seleniumgrid/</guid>
      <description>Selenium Grid: 将客户端发送的命令转发到远程浏览器上执行 WebDriver 脚本。 简介 Selenium Grid 是由一个 hub 服务和若干个 node 代理节点组成。 Hub 调度服务，管理各个代理节点的注册信息和状态信息，并且接收来自客户端代码的调用请求，把请求的命令转发给代理节点执行。 Node 代理节点，相当于一台可以运行浏览器自动化测试的机器，根据 hub 的命令</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/seleniumwire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/seleniumwire/</guid>
      <description>SeleniumWire 是 Selenium 的扩展，可以获取浏览器发出的请求数据。编写代码方式不变，增加额外的 API 来检查请求和响应并即时更改它们。 特性 纯 Python，用户友好的 API 捕获 HTTP 和 HTTPS 请求 拦截请求和响应 即时修改标题、参数、正文内容 捕获 websocket 消息 支持 HAR 格式 代理服务器支持 兼容性： Python 3.7+ Selenium 4.0.0+ 支持 Chrome、Firefox、E</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/%E4%B8%89%E7%A7%8D%E7%AD%89%E5%BE%85%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/%E4%B8%89%E7%A7%8D%E7%AD%89%E5%BE%85%E6%96%B9%E5%BC%8F/</guid>
      <description>selenium 三种等待方式演示。 强制等待 隐式等待 显式等待 强制等待 import time # 整个程序强制等待 3 秒 time.sleep(3) 隐式等待 设置一个全局的等待时间，以隐式等待找到元素或完成命令。每个会话只需要调用一次此方法。 # Amount of time to wait (in seconds) driver.implicitly_wait(3) 显式等待 定义等待条件，满足条件才继续向下执行，否则继续等待，超时后抛出异常。更加灵活的等待</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/%E4%BD%BF%E7%94%A8cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/%E4%BD%BF%E7%94%A8cookies/</guid>
      <description>WebDriver 与 cookie 进行交互的方法。 cookie 通常用于网站识别用户的身份，保持登录状态或追踪用户浏览记录。 Name：cookie 的名称 Value：cookie 的值 Domain：允许接收 cookie 的主机 Path：请求 URL 路径 Expires/Max-Age：cookie 有效期 Size：cookie 的大小 HttpOn</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/%E5%85%AB%E5%A4%A7%E5%AE%9A%E4%BD%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/%E5%85%AB%E5%A4%A7%E5%AE%9A%E4%BD%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>对元素的操作方法 # 点击元素 ele.click() # 输入文本 ele.send_keys(&amp;#34;hello world&amp;#34;) # 上传图片 # input 标签可以直接使用 send_keys(文件地址) 上传文件 driver.get(&amp;#34;https://image.baidu.com/&amp;#34;) driver.find_element(By.ID, &amp;#34;sttb&amp;#34;).click() driver.find_element(By.ID, &amp;#34;stfile&amp;#34;).send_keys(&amp;#34;/Users/lan/Pictures/7.jpeg&amp;#34;) sleep(10) # 获取元素的尺寸 ele.size # 获取元素的坐标 ele.location # 获取元素的文本（a 标签、p 标签或者 div 标签中的文本内容） ele.text # 获取元素属性值;通过属性名获取属性值 ele.get_attrbut(&amp;#34;attr_name&amp;#34;) 八大元素定位方式 1. id import time</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/%E5%8A%A8%E4%BD%9C%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/%E5%8A%A8%E4%BD%9C%E6%8E%A5%E5%8F%A3/</guid>
      <description>用于向 Web 浏览器提供虚拟化输入操作的低级接口。 键盘输入 鼠标输入 笔或触摸设备的指针输入 滚轮输入（v4.2+） 实现动作交互依赖ActionChains库，是对更底层动作类ActionBuilder的封装。 当调用ActionChains操作方法时，操作事件被存储在ActionChains</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/%E5%8E%9F%E7%90%86/</guid>
      <description>https://cloud.tencent.com/developer/article/2033963</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/%E5%A4%9Aframe%E5%AE%9A%E4%BD%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/%E5%A4%9Aframe%E5%AE%9A%E4%BD%8D/</guid>
      <description>frame 简介 frame 是 html 中的框架导航。同一个框架集中，点击某一框架的超链接，内容会在另一个框架的窗口中展示。 比如后台管理页面，点击左侧导航栏按钮，在右侧区域展示加载的内容，而不是打开一个新的窗口。 代码如下，可访问在线 html 运行网站编辑查看。a &amp;lt;!-- https://www.w3school.com.cn/tiy/t.asp?f=html_frame_cols --&amp;gt; &amp;lt;html&amp;gt; &amp;lt;frameset rows=&amp;#34;15%,*&amp;#34;&amp;gt; &amp;lt;frame src=&amp;#34;/example/html/frame_a.html&amp;#34;&amp;gt; &amp;lt;frameset cols=&amp;#34;20%,*&amp;#34;&amp;gt; &amp;lt;frame src=&amp;#34;/example/html/frame_b.html&amp;#34;&amp;gt; &amp;lt;frame src=&amp;#34;/example/html/frame_c.html&amp;#34; name=&amp;#34;show&amp;#34;&amp;gt; &amp;lt;/frameset&amp;gt; &amp;lt;/frameset&amp;gt; &amp;lt;/html&amp;gt; 在左侧导航栏页面添</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/%E6%89%A7%E8%A1%8Cjs%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/%E6%89%A7%E8%A1%8Cjs%E8%84%9A%E6%9C%AC/</guid>
      <description>在当前窗口或框架上下文中，执行 JavaScript 脚本。 使用JavaScript操作页面： 解决点击不生效的问题 页面滚动 修改元素属性 JavaScript // 进入浏览器 -&amp;gt; 检查 -&amp;gt; console // 获取网页名称 document.title // 显示 alert window.alert(&amp;#34;hello selenium&amp;#34;) // 获取网页的性能数据 JSON.stringify(performance.timing) Selenium 调用 def execute_script(self, script, *args): # script: JavaScript 代码 # args: 任何适用于 JavaScript 的参数 ... # 示例：返回 h1 标签元素的文本 driver.get(&amp;#34;https://www.selenium.dev/&amp;#34;) header = driver.find_element(By.CSS_SELECTOR, &amp;#34;h1&amp;#34;) # return: 返回</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/%E6%97%A0%E5%A4%B4%E6%B5%8F%E8%A7%88%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/%E6%97%A0%E5%A4%B4%E6%B5%8F%E8%A7%88%E5%99%A8/</guid>
      <description># 打印浏览器页面，要求为无头浏览器 from selenium.webdriver.common.print_page_options import PrintOptions print_options = PrintOptions() print_options.page_ranges = [&amp;#39;1-2&amp;#39;] driver.get(&amp;#34;printPage.html&amp;#34;) base64code = driver.print_page(print_options) from seleniumwire import webdriver options = webdriver.ChromeOptions() options.add_argument(&amp;#39;--headless=True&amp;#39;) # 无头浏览器模式 options.add_argument(&amp;#39;disable-infobars&amp;#39;) # 隐藏提示：&amp;#34;Chrome正在受到自动软件的控制&amp;#34; options.add_argument(&amp;#39;lang=zh_CN.UTF-8&amp;#39;) # 设置中文 options.add_argument(&amp;#39;window-size=1920x3000&amp;#39;) # 指定浏览器分辨率 options.add_argument(&amp;#39;--hide-scrollbars&amp;#39;) # 隐藏滚动条, 应对一些特殊页面 # options.add_argument(&amp;#39;--remote-debugging-port=9222&amp;#39;) # 开启 debug 模式 # options.add_argument(&amp;#39;proxy-server=127.0.0.1:8081&amp;#39;) # 设置代理 # options.add_argument(&amp;#39;blink-settings=imagesEnabled=false&amp;#39;) # 设置图片不加载 options.add_argument(&amp;#39;user-agent=hello world&amp;#39;)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/%E7%AA%97%E5%8F%A3%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/%E7%AA%97%E5%8F%A3%E6%93%8D%E4%BD%9C/</guid>
      <description>selenium 窗口处理相关操作。 窗口操作 # 窗口最大化 driver.maximize_window() # 窗口最小化 driver.minimize_window() # 窗口全屏化 driver.fullscreen_window() # 获取窗口大小 size = driver.get_window_size() width = size.get(&amp;#34;width&amp;#34;) height = size.get(&amp;#34;height&amp;#34;) # 设置窗口大小 driver.set_window_size(1024, 768) # 获取窗口左上角坐标位置 position = driver.get_window_position() x = position.get(&amp;#39;x&amp;#39;) y = position.get(&amp;#39;y&amp;#39;) # 设置窗口左上角坐标位置 driver.set_window_position(0, 0) # 窗口截图 driver.save_screenshot(&amp;#39;./image.png&amp;#39;) # 对特定元素截图 ele = driver.find_element(By.ID, &amp;#39;su&amp;#39;) ele.screenshot(&amp;#39;./image.png&amp;#39;) 多窗口场景处理 网页上点击某个链接，有可能会打开一个新</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/selenium/%E9%A1%B5%E9%9D%A2%E5%BC%B9%E6%A1%86alert%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/selenium/%E9%A1%B5%E9%9D%A2%E5%BC%B9%E6%A1%86alert%E6%93%8D%E4%BD%9C/</guid>
      <description>Selenium 页面消息框处理2 alert：警告消息框 confirm：确认消息框 prompt：提示消息对话框 还有一种是页面弹框，类似百度登录，这种可以直接定位到，此处忽略。 操作 alert 的方法 # 获取当前页面上的警告框 alert = switch_to.alert() alert.text # 返回文本信息 alert.accept() # 确定 alert.dismiss() # 取消 alert.send_keys(&amp;#34;hello&amp;#34;) # 输入文本 1. alert alert()方法用于显示带有一</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E9%9C%80%E6%B1%82/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E9%9C%80%E6%B1%82/</guid>
      <description>用例执行 全局环境配置 全局变量 变量提取 场景化测试</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</guid>
      <description>@TOC 一、登录数据库服务器 登录方式 远程连接（ssh） 本地服务器（本地搭建） 我这里通过本地 docker 的方式，启动数据库服务，登录命令： $ docker exec -it mysql /bin/bash 查看数据库版本信息 $ mysql --version $ mysql -V 登录数据库 $ mysql -h localhost -u root -p # -h：指连接的主机名 # -u：用户名 # -p：密码 # 然后输入密码，进入数据库 查看数据库版本 mysql&amp;gt; SELECT VERSION();</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/tech/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/tech/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/</guid>
      <description>学习资料汇总 Python Pytest PyQt5 maicss / PyQt-Chinese-tutorial：中文文档 PyQt5 / PyQt：使用小例子 iOS 自动化测试 python-wda alibaba / taobao-iphone-device 自动遍历测试 bytedance / Fastbot_iOS Android 自动化测试 openatx / adbutils openatx / uiautomator2 自动遍历测试 zhangzhao4444 / Maxim（转为 Fastbot- Android） bytedance / Fastbot_Android API 自动化测试 psf / requests kennethreitz / requests-html：request</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/%E4%B8%AA%E4%BA%BA/2022%E9%9D%A2%E8%AF%95%E8%BF%9B%E5%BA%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/%E4%B8%AA%E4%BA%BA/2022%E9%9D%A2%E8%AF%95%E8%BF%9B%E5%BA%A6/</guid>
      <description>1. 微创：抖音外包 ❌ 联系 HR：龙艳秋 最多 16k+ 三餐 字节是早10晚8固定双休（加班9-10点，免费宵夜，报销打车费，可调休，午休2小时），包三餐，12薪，无年终，零食水果下午茶免费畅饮，缴纳六险一金（最低基数）。 第一面：外包内面 11.16 日 下午 3 点 自我介绍 测试流程 web 端和 APP 端测试有什么区别？ get 和 post</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/%E4%B8%AA%E4%BA%BA/todo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/%E4%B8%AA%E4%BA%BA/todo/</guid>
      <description>TODO 的事情就往下面写，一直攒一直攒，怎么都干不完～ 别像弱智一样提问：https://blog.ljcbaby.top/article/Stop-Ask-Questions-The-Stupid-Ways/ 问题记录 token 的破解与防范 Docker Docker之四种网络模式 、容器的互通与隔离 selenium 面试题 1</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/%E4%B8%AA%E4%BA%BA/%E6%B5%8B%E8%AF%95%E8%B7%AF%E7%BA%BF%E5%8F%82%E8%80%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/%E4%B8%AA%E4%BA%BA/%E6%B5%8B%E8%AF%95%E8%B7%AF%E7%BA%BF%E5%8F%82%E8%80%83/</guid>
      <description>我的测试开发成长路线和面试经验 首先，我认为一定要有自己的学习方向，目标是要做到 T 字型人才，保证广度的时候也一定要有一两项专精，这样才能够在面试时候脱颖而出。 分享下我个人的学习路线和面试前重点准备技能： pytest-&amp;gt;完善接口自动化框架-&amp;gt;UI自动化框架-&amp;gt;Lin</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/%E4%B8%AA%E4%BA%BA/%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C-%E8%BD%AC%E8%BD%BDcehsiren/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/%E4%B8%AA%E4%BA%BA/%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C-%E8%BD%AC%E8%BD%BDcehsiren/</guid>
      <description>文章来源：测试人社区 ling_tianxia 的分享。 原文地址： https://ceshiren.com/t/topic/3505 这里归纳总结了一些测试工程师常见的面试题，包含网络收集（完善）、个人遇到的、日常讨论等部分，总结为以下十个部分，供大家参考。如有错误的地方，欢迎指正。有更多的面试题或面试中遇到的坑，也希望补充分享。希望大家都能找到满意的工作，共勉之！~ 软</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abeelan.github.io/posts/%E4%B8%AA%E4%BA%BA/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abeelan.github.io/posts/%E4%B8%AA%E4%BA%BA/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</guid>
      <description>接口测试 1、做接口测试的过程中发现过哪些 bug? 前端公共参数拼接错误，导致功能未生效； 充值活动赠券，产品需求赠送固定金额，修改充值金额依然可以获取赠送数量 2、平常你是怎么测试接口的？ 通能测试同时抓包，验证功能跟接口返回值 功能基本通过后，修改参数进行不同组合验证 最后添加到测试脚本内，线上</description>
    </item>
    
    
    
  </channel>
</rss>
